{"version":3,"sources":["webpack:///0.build.js","webpack:///./src/demo/demo1/index.vue","webpack:///src/lib/tree.vue","webpack:///./src/lib/branch.vue","webpack:///./src/lib/icon/iconfont.eot","webpack:///src/lib/branch.vue","webpack:///./src/lib/index.js","webpack:///./src/lib/tree.vue","webpack:///./src/lib/tree.vue?4c4b","webpack:///./src/lib/tree.vue?c287","webpack:///./src/lib/branch.vue?a2af","webpack:///./src/lib/branch.vue?3aba","webpack:///./src/lib/icon/iconfont.css","webpack:///./node_modules/_css-loader@0.28.11@css-loader/lib/url/escape.js","webpack:///./src/lib/icon/iconfont.ttf","webpack:///./src/lib/icon/iconfont.svg","webpack:///./src/lib/icon.json","webpack:///./src/lib/branch.vue?fe1c","webpack:///./src/lib/tree.vue?44ba","webpack:///src/demo/demo1/index.vue","webpack:///./src/demo/demo1/index.vue?d5fd","webpack:///./src/demo/demo1/index.vue?5748","webpack:///./src/demo/demo1/listdata.json","webpack:///./src/demo/demo1/index.vue?74dd"],"names":["webpackJsonp","346","module","__webpack_exports__","__webpack_require__","injectStyle","ssrContext","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_index_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_c3107bf0_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_index_vue__","normalizeComponent","__vue_styles__","Component","347","__WEBPACK_IMPORTED_MODULE_0__branch__","components","Branch","name","data","clickBranchIndex","props","methods","getClickBranchIndex","index","this","348","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_branch_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_491d7a19_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_branch_vue__","349","exports","p","350","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","__WEBPACK_IMPORTED_MODULE_1__icon_json__","__WEBPACK_IMPORTED_MODULE_1__icon_json___default","n","_typeof","Symbol","iterator","obj","constructor","prototype","control","animationTime","branchLevel","default","depth","listData","open","openOnly","indent","spacing","icon","iconSize","animation","clickBranch","parameter","doAnimation","getChildBranchIndex","isNaN","parseInt","getIcon","doRotate","setControl","$listClick","$emit","document","getElementById","push","elBox","style","display","apply","_this","enterLeave","reverse","setTimeout","elBranch","className","replace","_this2","elIcon","transition","transform","el","$set","branchStyle","id","branchOpenStyle","branchCloseStyle","branchIfShow","parentIndex","toString","split","slice","join","parentControl","branchClassName","branchClass","theId","theChildren","theData","children","substring","str","indexOf","privateIcon","undefined","a","iconCloseStyle","iconOpenStyle","iconCloseClassName","iconOpenClassName","branchIconStyle","elIndex","iconStyle","cssText","branchIconClassName","iconClass","branchAnimationStyle","theStyle","animationOpenStyle","animationCloseStyle","branchBoxStyle","boxStyle","computed","branchIconBgStyle","created","351","__WEBPACK_IMPORTED_MODULE_0__tree__","console","log","tree","install","Vue","o","ele","LTree","extend","listtree","propsData","$mount","window","use","352","__WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_tree_vue__","__WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_578e9b7a_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_tree_vue__","353","content","locals","354","355","356","357","escape","358","url","test","359","360","361","icon1","icon2","icon3","icon4","icon5","icon6","icon7","icon8","icon9","icon10","362","render","_vm","_h","$createElement","_c","_self","_l","item","key","class","attrs","data-index","on","click","$event","preventDefault","staticClass","_e","_v","_s","sendClickBranchIndex","staticRenderFns","esExports","363","365","__WEBPACK_IMPORTED_MODULE_0_vue__","__WEBPACK_IMPORTED_MODULE_1__lib__","__WEBPACK_IMPORTED_MODULE_2__listdata_json__","__WEBPACK_IMPORTED_MODULE_2__listdata_json___default","r","sessionStorage","demo","location","reload","370","371","372","373","_m"],"mappings":"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","file":"0.build.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 346:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_index_vue__ = __webpack_require__(365);\n/* empty harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_c3107bf0_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_index_vue__ = __webpack_require__(373);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(370)\n}\nvar normalizeComponent = __webpack_require__(130)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_index_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_c3107bf0_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_index_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 347:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__branch__ = __webpack_require__(348);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* eslint-disable spaced-comment */\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n    components: {\n        Branch: __WEBPACK_IMPORTED_MODULE_0__branch__[\"a\" /* default */]\n    },\n    name: 'mytree',\n    data: function data() {\n        return {\n            clickBranchIndex: '' // -----------被点击的分支index，当用户点击branch时赋值\n        };\n    },\n\n    props: ['listData', 'open', 'openOnly', 'indent', 'spacing', 'icon', 'iconSize', 'animation'],\n    methods: {\n        getClickBranchIndex: function getClickBranchIndex(index) {\n            this.clickBranchIndex = index;\n        }\n        // /* createList 函数把从外部读取的数组转化为树形结构，x为代表目录信息的数组，parent为目录的父元素，t为中介参数，用来传递arr的值，arr的值包含了目录在树状结构中所处级别和位置的信息 */\n        // createList (x, parent, t = []) {\n        //   let _this = this\n        //   if (x.length > 0) {\n        //     /* 设定arr的值，使arr的长度和目录在树状结构中所处级别对应，arr内元素的值和目录位置对应。比如arr值为[0,3]时，表示该目录处于第一大类（arr第一个元素值为0）第四个分类（arr第二个元素值为3），目录的级别为第二小分类（arr长度为2）。arr值为[2]时，表示该目录处于第三大类，目录级别为大类。知道目录所处级别就可以为不同级别的目录设定不同的样式 */\n        //     let arr = []\n\n        //     /* 通过循环设定arr的值等于t，但不能通过arr=t来设定，这样设定的话就把arr的值和t的值绑定，改变其中一个的值就会改变另一个的值，这不是我们想要的 */\n        //     for (let k = 0; k < t.length; k++) {\n        //       arr[k] = t[k]\n        //     }\n        //     /* 每次执行 createList 函数的时候都将arr的长度增加1（创建下一级目录时都要执行 createList 函数），从而达到使arr.length与目录级别一致的目的*/\n        //     arr.push(0)\n\n        //     /* ellist收集了所有当前级别目录所在div，当需要改变所有目录样式的时候可以通过循环ellist来设定每个目录的样式 ，allellist则是所有目录所在div的集合，通过循环allellist可获取非本级别的目录*/\n        //     let ellist = []\n\n        //     /* 根据x中的各元素创建树状目录及其属性 */\n        //     for (let n = 0; n < x.length; n++) {\n        //       /* 目录展开或关闭：当目录样式名称中包含openr表示该目录是展开的，当目录样式名称中包含closer表示该目录是关闭的。反过来当要展开目录时则将目录样式添加openr，并删除closer。当要关闭目录时则将目录样式添加closer，并删除openr。 */\n        //       let openr = ' titleopen'\n        //       let closer = ' titleclose'\n\n        //       /* 创建目录 */\n        //       let link\n        //       let par = document.createElement('div')\n        //       let iconDiv = document.createElement('div')\n        //       par.appendChild(iconDiv)\n        //       let node = document.createTextNode(x[n].name)\n        //       if (!x[n].childer || x[n].childer.length === 0) {\n        //         link = document.createElement('a')\n        //         link.appendChild(node)\n        //         link.setAttribute('href', x[n].router)\n        //         par.appendChild(link)\n        //       } else {\n        //         par.appendChild(node)\n        //       }\n        //       par.style.paddingLeft = this.indentLetter + 10 + 'px'\n        //       par.style.marginBottom = this.branchSpace + 'px'\n\n        //       let iconDivClassName = 'iconDiv'\n        //       /* 当this.ifIcon为true表示目录前要带有图标，则将图标div显示，并且根据customIcon值判断是否使用自定义图标，使用自定义图标则图标div使用className为coutomIconDivOpen或者coutomIconDivClose，不使用自定义图标则图标div使用className为iconDivOpen或者iconDivClose */\n        //       if (this.ifIcon) {\n        //         iconDiv.style.display = ''\n        //         if (_this.customIcon.length === 0) {\n        //           iconDivClassName = 'iconDiv'\n        //         } else {\n        //           iconDivClassName = 'coutomIconDiv'\n        //         }\n        //       } else { // 否则表示目录前不带有图标则将图标div隐藏\n        //         iconDiv.style.display = 'none'\n        //       }\n\n        //       /* 当open等于1时，设定所有目录初始状态都是展开的 */\n        //       if (_this.open === 1) {\n        //         par.className = 'par' + openr\n        //         iconDiv.className = iconDivClassName + 'Open'\n        //         if (_this.customIcon.length !== 0) {\n        //           iconDiv.style.backgroundImage = 'url(' + _this.customIcon[1] + ')'\n        //           iconDiv.style.backgroundRepeat = 'no-repeat'\n        //           iconDiv.style.backgroundPosition = 'center center'\n        //         }\n        //       } else { // 当open不等于1时，设定所有目录初始状态都是关闭的\n        //         par.className = 'par' + closer\n        //         iconDiv.className = iconDivClassName + 'Close'\n        //         if (_this.customIcon.length !== 0) {\n        //           iconDiv.style.backgroundImage = 'url(' + _this.customIcon[0] + ')'\n        //           iconDiv.style.backgroundRepeat = 'no-repeat'\n        //           iconDiv.style.backgroundPosition = 'center center'\n        //         }\n        //       }\n\n        //       /* 为每个目录添加一个' treeBranch' + arr.length 样式，即给一级目录添加 treeBranch1 样式，给二级目录添加 treeBranch2 样式，给三级目录添加 treeBranch3 样式……，使得每级目录可以从外观上区别开来，并且 treeBranch 样式可以在插件外自定义*/\n        //       par.className = par.className + ' treeBranch' + arr.length\n\n        //       /* 每个目录下都有个box，其所有子目录都在box中 */\n        //       let box = document.createElement('div')\n        //       parent.appendChild(par)\n        //       parent.appendChild(box)\n\n        //       /* 设置子目录左边框相对于父目录左边框的缩进距离 */\n        //       box.style.paddingLeft = this.indentIcon + 'px'\n\n        //       /* child等于1的时候表示该目录下还有子目录，child等于0时表示该目录为底目录，下面已经没有子目录了。点击底目录可打开新的页面内容，点击非底目录则显示或隐藏下面的子目录 */\n        //       let child\n        //       if (x[n].childer && x[n].childer.length > 0) {\n        //         child = 1\n        //       } else {\n        //         child = 0\n        //         iconDiv.style.display = 'none'\n        //       }\n\n        //       /* 当open不等于1时隐藏box，即隐藏子目录，换句话说就是关闭所有目录 */\n        //       if (_this.open !== 1) {\n        //         box.style.display = 'none'\n        //       }\n        //       /* 当open等于3或4时，展开一级目录（arr.length与目录级别一致）*/\n        //       if ((_this.open === 3 || _this.open === 4) && arr.length === 1) {\n        //         par.className = par.className.replace(closer, openr)\n        //         iconDiv.className = iconDivClassName + 'Open'\n        //         if (_this.customIcon.length !== 0) {\n        //           iconDiv.style.backgroundImage = 'url(' + _this.customIcon[1] + ')'\n        //           iconDiv.style.backgroundRepeat = 'no-repeat'\n        //           iconDiv.style.backgroundPosition = 'center center'\n        //         }\n        //         box.style.display = ''\n        //         if (_this.open === 4 && arr.length === 1) {\n        //           iconDiv.style.display = 'none'\n        //         }\n        //       }\n\n        //       /* ------------------------点击事件--------------------------- */\n        //       par.onclick = function () {\n        //         /* 当open等于2并且当前被点击的目录为关闭状态的时候关闭所有的目录，为展开当前目录做准备（因为open等于2时在同一时间只允许展开一个目录） */\n        //         if (_this.open === 2 && par.className.indexOf(closer) !== -1) {\n        //           for (let k = 0; k < ellist.length; k++) {\n        //             ellist[k].par.className = ellist[k].par.className.replace(openr, closer)\n        //             ellist[k].iconDiv.className = iconDivClassName + 'Close'\n        //             if (_this.customIcon.length !== 0) {\n        //               ellist[k].iconDiv.style.backgroundImage = 'url(' + _this.customIcon[0] + ')'\n        //               ellist[k].iconDiv.style.backgroundRepeat = 'no-repeat'\n        //               ellist[k].iconDiv.style.backgroundPosition = 'center center'\n        //             }\n        //             ellist[k].box.style.display = 'none'\n        //           }\n        //         }\n\n        //         /* 当该目录为展开状态时，点击后闭合，当该目录为闭合状态时，点击后展开，但open等于4并且被点击的目录为一级目录时点击无效 */\n        //         if (_this.open !== 4 || arr.length > 1) {\n        //           box.style.display = box.style.display === 'none' ? '' : 'none'\n        //           if (par.className.indexOf(openr) !== -1) {\n        //             par.className = par.className.replace(openr, closer)\n        //             iconDiv.className = iconDivClassName + 'Close'\n        //             if (_this.customIcon.length !== 0) {\n        //               iconDiv.style.backgroundImage = 'url(' + _this.customIcon[0] + ')'\n        //               iconDiv.style.backgroundRepeat = 'no-repeat'\n        //               iconDiv.style.backgroundPosition = 'center center'\n        //             }\n        //           } else if (par.className.indexOf(closer) !== -1) {\n        //             par.className = par.className.replace(closer, openr)\n        //             iconDiv.className = iconDivClassName + 'Open'\n        //             if (_this.customIcon.length !== 0) {\n        //               iconDiv.style.backgroundImage = 'url(' + _this.customIcon[1] + ')'\n        //               iconDiv.style.backgroundRepeat = 'no-repeat'\n        //               iconDiv.style.backgroundPosition = 'center center'\n        //             }\n        //           }\n        //         }\n\n        //         /* 当被点击的目录为底层目录时使得该目录及其中的一个祖先目录成选中状态 */\n        //         if (!x[n].childer || x[n].childer.length === 0) {\n        //           _this.router.push(x[n].router)\n        //           /* 通过循环allellist里的所有元素查找被点击目录的所有祖先目录，然后通过checkedparents值来确定一级祖先目录还是二级祖先目录设定为选中状态 */\n        //           for (let l = 0; l < _this.allellist.length; l++) {\n        //             if (_this.allellist[l].child === 0) {\n        //               _this.allellist[l].par.className = _this.allellist[l].par.className.replace(' checkedself', '')\n        //             } else if (_this.checkedparents === 1) {\n        //               if (_this.allellist[l].arr.length === 1) {\n        //                 /* 当allellist[l]为一级目录（即allellist[l].arr.length === 1）时，点击它下面的子孙目录时allellist[l]的样式才会改变。 */\n        //                 _this.allellist[l].par.className = _this.allellist[l].par.className.replace(' checkedparents', '')\n        //                 if (_this.allellist[l].arr[0] === arr[0]) {\n        //                   /* 通过判断allellist[l].arr中第一个元素和当前arr第一个元素是否相等来判断allellist[l]是否当前点击的这个目录的祖先目录，如果是则改变allellist[l]的样式 */\n        //                   _this.allellist[l].par.className = _this.allellist[l].par.className + ' checkedparents'\n        //                 }\n        //               }\n        //             } else if (_this.checkedparents === 2) {\n        //               if (_this.allellist[l].arr.length === 2) {\n        //                 /* 当allellist[l]为二级目录（即allellist[l].arr.length === 2）时，点击它下面的子孙目录时allellist[l]的样式才会改变 */\n        //                 _this.allellist[l].par.className = _this.allellist[l].par.className.replace(' checkedparents', '')\n        //                 if (_this.allellist[l].arr[0] === arr[0] && _this.allellist[l].arr[1] === arr[1]) {\n        //                   /* 通过判断allellist[l].arr中前2个元素和当前arr前2个元素是否相等来判断allellist[l]是否当前点击的这个目录的祖先目录，如果是则改变allellist[l]的样式 */\n        //                   _this.allellist[l].par.className = _this.allellist[l].par.className + ' checkedparents'\n        //                 }\n        //               }\n        //             }\n        //           }\n        //           /* 改变被点击的底层目录自身为选中状态 */\n        //           par.className = par.className + ' checkedself'\n        //         }\n        //       }\n        //       /* ----------------------------------------------------------- */\n\n        //       /* 将每个目录所在div信息收集起来，这里arr必须用一个中介（thearr）来转一下，否则后面push的arr值会覆盖前面的arr值 */\n        //       /* ellist收集的是本级目录信息，因为创建每级目录时都会执行一次createList，而每次执行createList都会重新定义ellist，所以每个ellist收集的都是本次执行函数createList时push给ellist的值 */\n        //       /* allellist收集的是所有目录的信息，因为allellist是函数createList外面的数据，每次push给allellist的值都保存在allellist里面 */\n        //       let thearr = []\n        //       for (let kk = 0; kk < arr.length; kk++) {\n        //         thearr[kk] = arr[kk]\n        //       }\n        //       let theel = {\n        //         par,\n        //         iconDiv,\n        //         box,\n        //         child,\n        //         arr: thearr\n        //       }\n        //       ellist.push(theel)\n        //       _this.allellist.push(theel)\n\n        //       /* 如果当前创建的目录还有子目录则再执行函数createList来创建子目录，*/\n        //       if (x[n].childer && x[n].childer.length > 0) {\n        //         _this.createList(x[n].childer, box, arr)\n        //       } else {\n        //         par.className = 'par title' + arr.length\n        //       }\n\n        //       /* 进入下次循环前将arr最后一个元素值加1，使得arr每个元素值与对应目录所处位置一致：元素值为0表示对应的目录在同级目录中为第一个目录，元素值为1表示对应的目录在同级目录中为第二个目录 */\n        //       /* arr.length则与对应目录所处级别一致：arr.length为1表示该目录为一级目录，arr.length为2表示该目录为二级目录 */\n        //       arr[arr.length - 1]++\n        //     }\n        //   }\n        // }\n\n    }\n});\n\n/***/ }),\n\n/***/ 348:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_branch_vue__ = __webpack_require__(350);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_491d7a19_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_branch_vue__ = __webpack_require__(362);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(355)\n}\nvar normalizeComponent = __webpack_require__(130)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_branch_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_491d7a19_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_branch_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 349:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"iconfont.eot?a5f8db96505701301350ff3d0cd3948d\";\n\n/***/ }),\n\n/***/ 350:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__branch__ = __webpack_require__(348);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__icon_json__ = __webpack_require__(361);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__icon_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__icon_json__);\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  name: 'branch',\n  data: function data() {\n    return {\n      control: {}, // -----------------控制各个branch,box,icon的展开或闭合状态\n      animationTime: 0 // -----------动画执行时间\n    };\n  },\n\n  components: {\n    Branch: __WEBPACK_IMPORTED_MODULE_0__branch__[\"a\" /* default */]\n  },\n  props: {\n    branchLevel: { // ---------分支级别，顶级分支为x，二级分支为x-x，三级分支为x-x-x，以此类推，系统会自动分别一级一级往下传递\n      default: 0\n    },\n    depth: { // ------------分支级别的深度，一级分支深度为0，二级分支深度为1，三级分支深度为2，以此类推，系统会自动分别一级一级往下传递\n      default: 0\n    },\n    clickBranchIndex: '', // -----------被点击的分支index，用户在分支上点击（处于组件branch.vue中）后会触发sendClickBranchIndex事件，上一级组件（上一级branch.vue）监听到sendClickBranchIndex后再运行gitClickBranchIndex事件，gitClickBranchIndex事件里又触发sendClickBranchIndex事件往上传递，一直到组件tree.vue监听到sendClickBranchIndex事件后更改data中的clickBranchIndex，tree.vue下所有的组件都会接受到clickBranchIndex的更改\n    // -------------------------------------------以上props内容用户不能控制，以下props用户可以设置-------------------------------\n    listData: { // -----------json格式的数据，每个分支目录有name,parameter,icon,children四个个字段，name为分支的文字内容（必须有）。parameter为点击分支时跳转的路由地址,如果不跳转可省略parameter字段。icon为该分支前的图标地址（包括展开时和闭合时的图标，所以icon是个数组），如果使用默认图标icon字段可以省略。children为该分支的下级分支，如果没有下级分支children字段也可以省略\n      default: function _default() {\n        return [];\n      }\n    },\n    open: { // --设置初始状态下各分支展开或闭合情况:0为全部闭合，1为全部展开；2第一个分支展开其他都闭合，且同级分支始终只能有一个展开；3除了一级分支展开，其他分支全都闭合；4除了一级分支展开，其他分支全都闭合，并且一级分支不能闭合，一级分支没有图标\n      default: 1\n    },\n    openOnly: {\n      default: 0\n    },\n    indent: { // -----子级分支相对父级分支的缩进距离\n      default: 24\n    },\n    spacing: { // ---------图标与文字之间的距离\n      default: 20\n    },\n    icon: {\n      default: 1 // ------icon等于0时表示用户不需要图标，为大于0的整数时为系统自带的图标，为数组时为自定义图标（Font-Awesome和阿里巴巴图标）作为图标，数组第一个元素为闭合时图标，第二个元素为展开时图标或者是闭合图标需要旋转的角度，当数组内元素为图片地址时，也可以用自定义图片做图标\n    },\n    iconSize: { // -----设置图标大小\n      default: 25\n    },\n    animation: { // ---animation设为false时不使用动画\n      default: 1\n    }\n  },\n  methods: {\n    clickBranch: function clickBranch(index, parameter) {\n      // -----------------------------branch 点击事件--------------------------------\n      if (this.control['lt-branch_' + index][0] === 'always') return false;\n      /* 如果没有动画，那么点击branch时直接就修改control值，否则就在执行完动画后在doAnimation中修改control值 */\n      if (this.animation !== false) {\n        this.doAnimation(this.getChildBranchIndex(index), index);\n        if (!isNaN(parseInt(this.getIcon[1]))) this.doRotate(index);\n      } else {\n        this.setControl(index);\n      }\n      if (typeof this.$listClick === \"function\") {\n        this.$listClick(parameter); // ----branch被点击时传递parameter给插件外的组件，插件外的组件通过给Vue的原型添加方法$listClick来获取参数parameter，并进行一系列的操作\n      }\n\n      if (parameter) {\n        this.$emit('sendClickBranchIndex', index);\n      }\n      return false;\n    },\n    getChildBranchIndex: function getChildBranchIndex(index) {\n      // ----- 获取子分支index，用于动画展现（只获取显示的子分支，隐藏状态的不获取）\n      var n = 1;\n      var arr = [];\n      while (document.getElementById('lt-branch_' + index + '-' + n)) {\n        arr.push(index + '-' + n);\n        var elBox = document.getElementById('lt-branch-animation_' + index + '-' + n);\n        if (elBox && elBox.style.display !== 'none') {\n          arr.push.apply(arr, _toConsumableArray(this.getChildBranchIndex(index + '-' + n)));\n        }\n        n++;\n      }\n      return arr;\n    },\n    doAnimation: function doAnimation(arr, index) {\n      var _this = this;\n\n      // ----------执行动画\n      var elBox = document.getElementById('lt-branch-animation_' + index);\n\n      if (elBox) {\n        (function () {\n          elBox.style.display = '';\n          var enterLeave = void 0;\n          if (_this.control['lt-branch_' + index][0] === 'open' || _this.control['lt-branch_' + index][0] === 1) {\n            // --当前为展开状态则将要执行的是收缩动画\n            arr = arr.reverse(); // -----反转数组，即动画从最后一个子分支开始执行\n            enterLeave = 'leave';\n            setTimeout(function () {\n              _this.setControl(index);\n              elBox.style.display = 'none';\n            }, arr.length * 50 + 200);\n          } else if (_this.control['lt-branch_' + index][0] === 'close' || _this.control['lt-branch_' + index][0] === 0) {\n            enterLeave = 'enter';\n            _this.setControl(index);\n            elBox.style.display = '';\n          }\n\n          var _loop = function _loop(n) {\n            var elBranch = document.getElementById('lt-branch_' + arr[n]);\n            if (elBranch) {\n              elBranch.className = elBranch.className.replace(' enter-start', '').replace(' leave-start', '').replace(' enter-end', '').replace(' leave-end', '');\n              if (enterLeave === 'leave') elBranch.className += ' leave-start'; // ----展开的动画起始样式在这里，为了避免display的干扰收缩的动画样式必须在display改变之后\n              elBranch.style.display = enterLeave === 'leave' ? 'block' : 'none';\n              if (typeof arr[n] === 'string') {\n                setTimeout(function () {\n                  // -----相邻的分支之间执行动画相隔80微秒\n                  if (enterLeave === 'leave') {\n                    elBranch.className += ' leave-end';\n                    setTimeout(function () {\n                      elBranch.style.display = 'none'; // ---用setTimeout是因为必须在展开动画执行完后才隐藏分支，同时也能避免display的改变对展开动画的干扰\n                    }, 300);\n                  } else if (enterLeave === 'enter') {\n                    elBranch.style.display = 'block';\n                    elBranch.className += ' enter-start'; // ----- 收缩的动画放在这里开始是为了避免display的干扰\n                    setTimeout(function () {\n                      elBranch.className += ' enter-end'; // ----这里如果不用setTimeout的话css3动画不能执行\n                    }, 100);\n                  }\n                }, 50 * n);\n              }\n            }\n          };\n\n          for (var n = 0; n < arr.length; n++) {\n            _loop(n);\n          }\n        })();\n      }\n    },\n    doRotate: function doRotate(index) {\n      var _this2 = this;\n\n      // -------图标旋转动画\n      var elIcon = document.getElementById('lt-branch-icon_' + index);\n      if (elIcon) {\n        elIcon.style.transition = 'all .3s';\n        if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 1) {\n          // --当前为展开状态则将要执行的是收缩动画\n          setTimeout(function () {\n            elIcon.style.transform = elIcon.style.transform.replace(/rotate\\(\\d*deg\\)/, '');\n            elIcon.style.transform += ' rotate(0deg)';\n          }, 0);\n        } else if (this.control['lt-branch_' + index][0] === 'close' || this.control['lt-branch_' + index][0] === 0) {\n          setTimeout(function () {\n            elIcon.style.transform = elIcon.style.transform.replace(/rotate\\(\\d*deg\\)/, '');\n            elIcon.style.transform += ' rotate(' + parseInt(_this2.getIcon(index)[1]) + 'deg)';\n          }, 0);\n        }\n      }\n    },\n    setControl: function setControl(index) {\n      // -----设置this.control['lt-branch_' + index][0]的值，该值决定branch是展开还是闭合\n      if (this.openOnly === 1) {\n        // -------openOnly为1时通过循环将所有同级别的branch都关闭确保同级别只能展开一个分支\n        var n = 1;\n        var el = void 0;\n        do {\n          if (this.branchLevel + n !== index) {\n            this.control['lt-branch_' + (this.branchLevel + n)][0] = 'close';\n            // this.renewStyle([this.branchLevel + n]) // -------------------------这里renewStyle刷新的是所有同级的分支样式，函数结尾的renewStyle刷新的只是被点击的分支的style\n          }\n          n++;\n          el = document.getElementById('lt-branch_' + (this.branchLevel + n));\n        } while (el);\n      }\n\n      if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 1) {\n        this.$set(this.control, 'lt-branch_' + index, ['close']);\n      } else if (this.control['lt-branch_' + index][0] === 'close' || this.control['lt-branch_' + index][0] === 0) {\n        this.$set(this.control, 'lt-branch_' + index, ['open']);\n      }\n    },\n    getClickBranchIndex: function getClickBranchIndex(index) {\n      // ---------------------------------获取当前点击的branch的index，\n      this.$emit('sendClickBranchIndex', index); // ---------并把该index值通过自定义事件传给父组件\n    },\n    branchStyle: function branchStyle(id) {\n      // --------branch的样式\n      var branchStyle = '';\n      if (this.control['lt-branch_' + id][0] === 'open' || this.control['lt-branch_' + id][0] === 1 || this.control['lt-branch_' + id][0] === 'always') {\n        branchStyle = this.branchOpenStyle;\n      } else {\n        branchStyle = this.branchCloseStyle;\n      }\n      return 'position: relative;\\n              text-align: left;\\n              ' + branchStyle;\n    },\n    branchIfShow: function branchIfShow(index) {\n      if (this.depth > 0) {\n        // -------一级分支永远都应该显示且一级分支没有父级分支，所以这里把一级分支排除不进行判断\n        var parentIndex = this.branchLevel.toString().split('-').slice(0, -1).join('-');\n        if (this.parentControl['lt-branch_' + parentIndex][0] === 'close' || this.parentControl['lt-branch_' + parentIndex][0] === 0) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return true;\n      }\n    },\n    branchClassName: function branchClassName(id) {\n      // ------------branch的className\n      var branchClass = '';\n      var theId = id.toString();\n      var theChildren = '';\n      var theData = '';\n\n      if (this.depth === 0) {\n        // --获取branch的children值，如果该branch没有children(即没有子分支)，就给它加上lt-branch_level_0样式\n        theData = this.listData[id - 1];\n        if (theData.children) theChildren = theData.children;\n      } else {\n        theData = this.listData[theId.replace(this.branchLevel, '') - 1];\n        if (theData.children) theChildren = theData.children;\n      }\n\n      branchClass = 'lt-branch lt-branch_level_' + (this.depth + 1); // --------添加常规分支className和当前级别的className\n      if (theChildren.length === 0) {\n        // ------如果branch没有子分支，就给branch加上 lt-branch_level_0 样式\n        branchClass += ' lt-branch_level_0';\n      }\n      if (theId.toString() === this.clickBranchIndex.toString().substring(0, theId.length)) {\n        // ------判断是否为当前active状态branch的祖先，如果是就加上active状态的className\n        branchClass += ' lt-branch_level_' + (this.depth + 1) + '_active';\n      }\n      /* 用被点击分支index减掉当前分支的index剩余部分包含一个\"-\"，即表示当前分支仅仅比被点击分支高一级（如果高一级以上，那么replace后剩余部分一定会包含多个\"-\"），为了消除特殊index带来的buger，在判断的时候clickBranchIndex和theId前都加了一个字母，并且最后得加一个判断：\"-\"在第一个位置 */\n      var str = ('a' + this.clickBranchIndex.toString()).replace('a' + theId.toString(), '');\n      if (str.split('-').length - 1 === 1 && str.indexOf('-') === 0) {\n        branchClass += ' lt-branch_active_parent';\n      }\n      if (theId.toString() === this.clickBranchIndex.toString()) {\n        // ------判断是否为当前active状态branch，如果是就加上active状态的className\n        branchClass += ' lt-branch_active';\n      }\n      return branchClass;\n    },\n    getIcon: function getIcon(index) {\n      // ---------图标来源（权重：listData > 参数icon > icon.json。如果一个branch没有子级，那么这个branch没有图标，但如果listData中该branch包含icon属性，那么这个branch哪怕没有子级它也有自己的图标）\n      /* 从listData读取icon */\n      var arr = index.toString().split('-');\n      var privateIcon = this.listData[arr[arr.length - 1] - 1].icon;\n      if (privateIcon !== undefined && privateIcon.length === 2) {\n        return privateIcon;\n      }\n      /* 从用户输入的参数icon 和 icon.json（默认）读取icon */\n      var icon = this.icon;\n      if (icon === '' || icon === 'undefined') icon = 1;\n      if (!isNaN(parseInt(icon))) {\n        if (icon === 0 || icon === false) return false; // -----icon等于0或者false时不显示图标\n        icon = __WEBPACK_IMPORTED_MODULE_1__icon_json___default.a['icon' + icon]; // ----------把icon.json里的数据赋予icon\n      }\n\n      return icon; // -----不管用户是使用系统默认图标、自定义图片还是使用第三方图标或者在listData中定义图标，icon都为数组，数组第一个元素为展开时的图标，第二个元素为闭合时图标（数组元素可能是图片地址，也可能是代表第三方图标的className）\n    },\n    iconCloseStyle: function iconCloseStyle(index) {\n      // -----图标闭合时的样式\n      if (this.getIcon(index)[0].indexOf('/') > -1) {\n        // -----------this.getIcon中的元素包含“/”说明用户使用自定义图片作为图标\n        return 'position: absolute;\\n                top: 0;\\n                left: 0;\\n                bottom: 0;\\n                right: 0;\\n                font-size:' + this.iconSize + 'px;\\n                background: url(\\'' + this.getIcon(index)[0] + '\\') center no-repeat;';\n      } else {\n        // ---------------------------------------------此时用户使用默认图标或第三方图标库来作为图标\n        return 'position: absolute;\\n                font-size:' + this.iconSize + 'px;\\n                top: 50%;\\n                transform: translateY(-50%);';\n      }\n    },\n    iconOpenStyle: function iconOpenStyle(index) {\n      // -----图标展开时的样式\n      if (isNaN(parseInt(this.getIcon(index)[1]))) {\n        // ---如果this.getIcon(index)第二个元素不是纯数字，它一定是与第一个元素代表完全不一样的图片或className。\n        if (this.getIcon(index)[0].indexOf('/') > -1) {\n          // -----------this.getIcon中的元素包含“/”说明用户使用自定义图片作为图标\n          return 'position: absolute;\\n                  top: 0;\\n                  left: 0;\\n                  bottom: 0;\\n                  right: 0;\\n                  font-size: ' + this.iconSize + 'px;\\n                  background: url(\\'' + this.getIcon(index)[1] + '\\') center no-repeat;';\n        } else {\n          // ---------------------------------------------此时用户使用默认图标或第三方图标库来作为图标\n          return 'position: absolute;\\n                  font-size:' + this.iconSize + 'px;\\n                  top: 50%;\\n                  transform: translateY(-50%);';\n        }\n      } else {\n        // ---如果this.getIcon(index)第二个元素是纯数字，它表示与第一个元素是一样的图片或className，只是需要顺时针旋转一个角度。\n        var transform = void 0;\n        if (this.getIcon(index)[0].indexOf('/') > -1) {\n          // ----如果是图片不需要上移\n          transform = 'transform: rotate(' + this.getIcon(index)[1] + 'deg);';\n        } else {\n          transform = 'transform: translateY(-50%) rotate(' + this.getIcon(index)[1] + 'deg);';\n        }\n        return this.iconCloseStyle(index) + '\\n                ' + transform;\n      }\n    },\n    iconCloseClassName: function iconCloseClassName(index) {\n      // ----------闭合时图标层的className\n      if (!this.getIcon(index)) return '';\n      if (this.getIcon(index)[0].indexOf('/') === -1) {\n        // ---如果图标使用的不是图片（图片地址一定含有“/”）\n        return this.getIcon(index)[0];\n      }\n      return '';\n    },\n    iconOpenClassName: function iconOpenClassName(index) {\n      // ----------展开时图标层的className\n      if (!this.getIcon(index)) return '';\n      if (isNaN(parseInt(this.getIcon(index)[1])) && this.getIcon(index)[1].toString().indexOf('/') === -1) {\n        // ---如果this.getIcon(index)第二个元素不是纯数字并且图标使用的不是图片（图片地址一定含有“/”）\n        return this.getIcon(index)[1];\n      } else if (!isNaN(parseInt(this.getIcon(index)[1]))) {\n        // ---this.getIcon(index)第二个元素是纯数字，展开时图标层的className和闭合时图标层的className应该一样，只是在设置style时旋转一定的角度就可以了（角度的度数是this.getIcon(index)）\n        return this.getIcon(index)[0];\n      }\n      return '';\n    },\n    branchIconStyle: function branchIconStyle(index) {\n      // ---------------------------------图标的样式-------------------------\n      if (this.icon === 0) return '';\n      var elIndex = document.getElementById('lt-branch-icon_' + index);\n      var iconStyle = void 0;\n      if (elIndex) iconStyle = elIndex.style.cssText;\n      if (this.clickBranchIndex !== index || this.animation === false) {\n        // ----禁止当前正处于动画状态的图标改变状态\n        if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 'always' || this.control['lt-branch_' + index][0] === 1) {\n          // ----------分支展开或闭合的情况\n          iconStyle = this.iconOpenStyle(index);\n        } else {\n          iconStyle = this.iconCloseStyle(index);\n        }\n      }\n      return iconStyle;\n    },\n    branchIconClassName: function branchIconClassName(index) {\n      // ---------------图标的className(当使用默认图标或第三方图标库时需要设定className)-------------------\n      var iconClass = '';\n      if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 'always' || this.control['lt-branch_' + index][0] === 1) {\n        iconClass += this.iconOpenClassName(index);\n      } else {\n        iconClass += this.iconCloseClassName(index);\n      }\n\n      iconClass += ' lt-branch-icon lt-branch-icon_level_' + (this.depth + 1); // --------添加常规分支图标className和当前级别图标的className\n      var theId = index.toString();\n      var theChildren = '';\n      var theData = '';\n\n      if (this.depth === 0) {\n        // --获取branch的children值，如果该branch没有children(即没有子分支)，就给它加上lt-branch_level_0样式\n        theData = this.listData[index - 1];\n        if (theData.children) theChildren = theData.children;\n      } else {\n        theData = this.listData[theId.replace(this.branchLevel, '') - 1];\n        if (theData.children) theChildren = theData.children;\n      }\n\n      if (theChildren.length === 0) {\n        // ------如果branch没有子分支，就给branch加上 lt-branch-icon_level_0 样式\n        iconClass += ' lt-branch-icon_level_0';\n      }\n      if (theId.toString() === this.clickBranchIndex.toString().substring(0, theId.length)) {\n        // ------判断是否为当前active状态branch的祖先，如果是就加上active状态的className\n        iconClass += ' lt-branch-icon_level_' + (this.depth + 1) + '_active';\n      }\n      if (theId.toString() === this.clickBranchIndex.toString()) {\n        // ------判断是否为当前active状态branch，如果是就加上active状态的className\n        iconClass += ' lt-branch-icon_active';\n      }\n      /* 用被点击分支index减掉当前分支的index剩余部分包含一个\"-\"，即表示当前分支仅仅比被点击分支高一级（如果高一级以上，那么replace后剩余部分一定会包含多个\"-\"），为了消除特殊index带来的buger，在判断的时候clickBranchIndex和theId前都加了一个字母，并且最后得加一个判断：\"-\"在第一个位置 */\n      var str = ('a' + this.clickBranchIndex.toString()).replace('a' + index.toString(), '');\n      if (str.split('-').length - 1 === 1 && str.indexOf('-') === 0) {\n        iconClass += ' lt-branch-icon_active_parent';\n      }\n      return iconClass;\n    },\n    branchAnimationStyle: function branchAnimationStyle(id) {\n      // ----animation的样式\n      var theStyle = '';\n      if (this.control['lt-branch_' + id][0] === 'open' || this.control['lt-branch_' + id][0] === 'always' || this.control['lt-branch_' + id][0] === 1) {\n        theStyle += this.animationOpenStyle;\n      } else if (this.control['lt-branch_' + id][0] === 'close' || this.control['lt-branch_' + id][0] === 0) {\n        theStyle += this.animationCloseStyle;\n      }\n      return theStyle;\n    },\n    branchBoxStyle: function branchBoxStyle(id) {\n      // -------------------------------------box的样式-----------------------\n      return 'margin:0px;\\n              padding:0px;\\n              border:0px;\\n              ' + this.boxStyle;\n    }\n  },\n  computed: {\n    branchIconBgStyle: function branchIconBgStyle() {\n      // ----图标背景层距离左边的距离，控制图标的位置\n      return 'left: ' + this.indent * this.depth + 'px;';\n    },\n    branchOpenStyle: function branchOpenStyle() {\n      // ---branch展开时的样式\n      return 'padding-left: ' + (this.indent * this.depth + this.spacing) + 'px;';\n    },\n    branchCloseStyle: function branchCloseStyle() {\n      // ---branch闭合时的样式\n      return 'padding-left: ' + (this.indent * this.depth + this.spacing) + 'px;';\n    },\n    animationOpenStyle: function animationOpenStyle() {\n      return 'margin:0px;\\n              padding:0px;\\n              border:0px;';\n    },\n    animationCloseStyle: function animationCloseStyle() {\n      return 'margin:0px;\\n              padding:0px;\\n              border:0px;\\n              height:0px;\\n              display:none;';\n    },\n    boxStyle: function boxStyle() {\n      return '';\n    }\n  },\n  created: function created() {\n    /*\r\n    将类似于下面 control 的值赋给data中的control，这样的话，就可通过this.control.branchLevel1[0]的值来控制分支branchLevel1的展开或闭合。其中branchLevel1中的1与每个分支中的data-index相同，这样每个分支在control中都有个对应的值来控制和判断它的状态。\r\n    control: {\r\n      lt-branch_1: ['close'],\r\n      lt-branch_2: ['close'],\r\n      lt-branch_3: ['close'],\r\n    }\r\n     */\n    for (var n = 1; n < this.listData.length + 1; n++) {\n      this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), ['close']); // ----------默认情况，所有branch都为闭合状态(数组第一个元素表示branch的展开或闭合状态['open'为展开，'close'为闭合]\n      this.$set(this.control, 'lt-branch-icon_' + (this.branchLevel + n), 'show'); // ----------默认情况，所有icon都为显示状态('show'为显示，'hidden'为隐藏)\n\n      if (this.open === 1) {\n        this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), ['open']); // ----------当open值为1时，所有branch都为展开状态\n      } else if (_typeof(this.open) === 'object') {\n        /* 当open为数组时，根据当前分支所处级别以及open中与该级别对应的元素来确定当前分支是“open”、“close”还是“always”状态。其中一级分支状态对应open第一个元素值， 二级分支状态对应open第二个元素值，以此类推。如果open长度不够，那当前级别的分支状态对应open最后一个元素的值 */\n        if (this.open.length > this.depth + 1 || this.open.length === this.depth + 1) {\n          this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), [this.open[this.depth]]);\n        } else {\n          this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), [this.open[this.open.length - 1]]);\n        }\n      }\n      if (this.openOnly === 1 && this.control['lt-branch_' + (this.branchLevel + n)][0] !== 'always') {\n        this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), ['close']);\n      }\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 351:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tree__ = __webpack_require__(352);\n\nconsole.log('object');\nvar tree = {\n  install: function install(Vue, o) {\n    var ele = '.listtree';\n    if (ele) {\n      o.el && (ele = o.el);\n      var LTree = Vue.extend(__WEBPACK_IMPORTED_MODULE_0__tree__[\"a\" /* default */]);\n      var listtree = new LTree({ propsData: {\n          listData: o.listData,\n          open: o.open,\n          openOnly: o.openOnly,\n          indent: o.indent,\n          spacing: o.spacing,\n          icon: o.icon,\n          iconSize: o.iconSize,\n          animation: o.animation\n        } });\n      setTimeout(function () {\n        listtree.$mount(ele);\n      }, 0);\n    }\n  }\n};\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(tree);\n}\n/* harmony default export */ __webpack_exports__[\"a\"] = (tree);\n\n/***/ }),\n\n/***/ 352:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_tree_vue__ = __webpack_require__(347);\n/* unused harmony namespace reexport */\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_578e9b7a_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_tree_vue__ = __webpack_require__(363);\nfunction injectStyle (ssrContext) {\n  __webpack_require__(353)\n}\nvar normalizeComponent = __webpack_require__(130)\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __WEBPACK_IMPORTED_MODULE_0__babel_loader_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_script_index_0_tree_vue__[\"a\" /* default */],\n  __WEBPACK_IMPORTED_MODULE_1__node_modules_vue_loader_13_7_2_vue_loader_lib_template_compiler_index_id_data_v_578e9b7a_hasScoped_false_buble_transforms_node_modules_vue_loader_13_7_2_vue_loader_lib_selector_type_template_index_0_tree_vue__[\"a\" /* default */],\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Component.exports);\n\n\n/***/ }),\n\n/***/ 353:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(354);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(129)(\"33d3be6e\", content, true, {});\n\n/***/ }),\n\n/***/ 354:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(91)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"a,a:hover{color:#000;text-decoration:none}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 355:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(356);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(129)(\"0dc019be\", content, true, {});\n\n/***/ }),\n\n/***/ 356:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(91)(false);\n// imports\nexports.i(__webpack_require__(357), \"\");\n\n// module\nexports.push([module.i, \".iconfont{font-family:iconfont!important;font-style:normal;font-weight:400;-webkit-font-smoothing:antialiased;-webkit-text-stroke-width:.2px;-moz-osx-font-smoothing:grayscale}.lt-branch-icon-Bg{width:20px;height:20px;position:absolute;transform:translateY(-50%);top:50%;left:0}.enter-start{transform:translateX(-25px);opacity:0;transition:all .3s}.enter-end,.leave-start{transform:translateX(0);opacity:1}.leave-start{transition:all .3s}.leave-end{transform:translateX(-25px);opacity:0}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 357:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar escape = __webpack_require__(358);\nexports = module.exports = __webpack_require__(91)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"@font-face{font-family:iconfont;src:url(\" + escape(__webpack_require__(349)) + \");src:url(\" + escape(__webpack_require__(349)) + \"#iefix) format(\\\"embedded-opentype\\\"),url(\\\"data:application/x-font-woff;charset=utf-8;base64,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\\\") format(\\\"woff\\\"),url(\" + escape(__webpack_require__(359)) + \") format(\\\"truetype\\\"),url(\" + escape(__webpack_require__(360)) + \"#iconfont) format(\\\"svg\\\")}.iconfont{font-family:iconfont!important;font-size:16px;font-style:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-sanjiao3:before{content:\\\"\\\\E600\\\"}.icon-shousuojiahao:before{content:\\\"\\\\E627\\\"}.icon-shousuojianhao:before{content:\\\"\\\\E628\\\"}.icon-wenjianjia:before{content:\\\"\\\\E663\\\"}.icon-tongxunguanlizhankai:before{content:\\\"\\\\E655\\\"}.icon-tongxunguanli:before{content:\\\"\\\\E656\\\"}.icon-wenjianjia1:before{content:\\\"\\\\E67F\\\"}.icon-wenjianjiafolder80:before{content:\\\"\\\\E743\\\"}.icon-wenjianjiashouqi:before{content:\\\"\\\\E653\\\"}.icon-wenjianjiazhankai:before{content:\\\"\\\\E654\\\"}.icon-jiantou12:before{content:\\\"\\\\E603\\\"}.icon-jianhao:before{content:\\\"\\\\E606\\\"}.icon-jiahao2:before{content:\\\"\\\\E648\\\"}.icon-yousanjiao:before{content:\\\"\\\\E629\\\"}.icon-jiajianchengchu-:before{content:\\\"\\\\E61C\\\"}.icon-jiajianchengchu-1:before{content:\\\"\\\\E61D\\\"}.icon-jiahao:before{content:\\\"\\\\E616\\\"}.icon-jianhao1:before{content:\\\"\\\\E617\\\"}.icon-sanjiao3-copy:before{content:\\\"\\\\E7E1\\\"}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 358:\n/***/ (function(module, exports) {\n\nmodule.exports = function escape(url) {\n    if (typeof url !== 'string') {\n        return url\n    }\n    // If url is already wrapped in quotes, remove them\n    if (/^['\"].*['\"]$/.test(url)) {\n        url = url.slice(1, -1);\n    }\n    // Should url be wrapped?\n    // See https://drafts.csswg.org/css-values-3/#urls\n    if (/[\"'() \\t\\n]/.test(url)) {\n        return '\"' + url.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n') + '\"'\n    }\n\n    return url\n}\n\n\n/***/ }),\n\n/***/ 359:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"iconfont.ttf?3fd9bbb39ea5fcd2e6e03f30a745e88e\";\n\n/***/ }),\n\n/***/ 360:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__.p + \"iconfont.svg?5acc98856fb3b59d18bdd51df00c3819\";\n\n/***/ }),\n\n/***/ 361:\n/***/ (function(module, exports) {\n\nmodule.exports = {\"icon1\":[\"iconfont icon-jiantou12\",45],\"icon2\":[\"iconfont icon-sanjiao3-copy\",90],\"icon3\":[\"iconfont icon-yousanjiao\",90],\"icon4\":[\"iconfont icon-yousanjiao\",\"iconfont icon-sanjiao3\"],\"icon5\":[\"iconfont icon-wenjianjia\",\"iconfont icon-wenjianjiafolder80\"],\"icon6\":[\"iconfont icon-wenjianjiashouqi\",\"iconfont icon-wenjianjiazhankai\"],\"icon7\":[\"iconfont icon-tongxunguanli\",\"iconfont icon-tongxunguanlizhankai\"],\"icon8\":[\"iconfont icon-jiahao\",\"iconfont icon-jianhao1\"],\"icon9\":[\"iconfont icon-shousuojiahao\",\"iconfont icon-shousuojianhao\"],\"icon10\":[\"iconfont icon-jiajianchengchu-1\",\"iconfont icon-jiajianchengchu-\"]}\n\n/***/ }),\n\n/***/ 362:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',_vm._l((_vm.listData),function(item,index){return _c('div',{key:index},[_c('div',{class:_vm.branchClassName(_vm.branchLevel+(index+1)),style:(_vm.branchStyle(_vm.branchLevel+(index+1))),attrs:{\"id\":'lt-branch_'+(_vm.branchLevel+(index+1)),\"data-index\":_vm.branchLevel+(index+1)},on:{\"click\":function($event){$event.preventDefault();_vm.clickBranch(_vm.branchLevel+(index+1), item.parameter)}}},[((_vm.getIcon(_vm.branchLevel+(index+1))&&item.children&&item.children.length>0)||(item.icon!==undefined&&item.icon.length===2))?_c('div',{staticClass:\"lt-branch-icon-Bg\",style:(_vm.branchIconBgStyle),attrs:{\"id\":'lt-branch-icon-bg_'+(_vm.branchLevel+(index+1))}},[((_vm.control['lt-branch-icon_'+(_vm.branchLevel+(index+1))]==='show')||(item.icon!==undefined&&item.icon.length===2))?_c('span',{class:_vm.branchIconClassName(_vm.branchLevel+(index+1)),style:(_vm.branchIconStyle(_vm.branchLevel+(index+1))),attrs:{\"id\":'lt-branch-icon_'+(_vm.branchLevel+(index+1))}}):_vm._e()]):_vm._e(),_c('span',[_vm._v(_vm._s(item.name))])]),_vm._v(\" \"),(item.children&&item.children.length>0)?_c('div',{style:(_vm.branchAnimationStyle(_vm.branchLevel+(index+1))),attrs:{\"id\":'lt-branch-animation_'+(_vm.branchLevel+(index+1))}},[_c('div',{style:(_vm.branchBoxStyle(_vm.branchLevel+(index+1), item.children)),attrs:{\"id\":'lt-branch-box_'+(_vm.branchLevel+(index+1))}},[(item.children&&item.children.length>0)?_c('branch',{attrs:{\"listData\":item.children,\"open\":_vm.open,\"openOnly\":_vm.openOnly,\"indent\":_vm.indent,\"spacing\":_vm.spacing,\"icon\":_vm.icon,\"iconSize\":_vm.iconSize,\"animation\":_vm.animation,\"clickBranchIndex\":_vm.clickBranchIndex,\"branchLevel\":_vm.branchLevel+(index+1)+'-',\"depth\":_vm.depth+1},on:{\"sendClickBranchIndex\":_vm.getClickBranchIndex}}):_vm._e()],1)]):_vm._e()])}))}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ 363:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('branch',{attrs:{\"listData\":_vm.listData,\"open\":_vm.open,\"openOnly\":_vm.openOnly,\"indent\":_vm.indent,\"spacing\":_vm.spacing,\"icon\":_vm.icon,\"iconSize\":_vm.iconSize,\"animation\":_vm.animation,\"clickBranchIndex\":_vm.clickBranchIndex},on:{\"sendClickBranchIndex\":_vm.getClickBranchIndex}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ }),\n\n/***/ 365:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue__ = __webpack_require__(92);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib__ = __webpack_require__(351);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__listdata_json__ = __webpack_require__(372);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__listdata_json___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__listdata_json__);\n//\n//\n//\n//\n//\n\n\n\n\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].use(__WEBPACK_IMPORTED_MODULE_1__lib__[\"a\" /* default */], {\n  listData: __WEBPACK_IMPORTED_MODULE_2__listdata_json___default.a,\n  icon: 0,\n  indent: 18,\n  open: ['always', 0, 1]\n});\n\n__WEBPACK_IMPORTED_MODULE_0_vue__[\"a\" /* default */].prototype.$listClick = function (r) {\n  if (typeof r !== 'undefined') {\n    console.log(r);\n  }\n};\n(function () {\n  /* 当多次使用Vue.use调用同一个插件时，后面的调用不起作用，这里为了调用不同的示例所以通过强制刷新页面来达到调用的目的，实际项目中一般不会重复调用同一个插件 */\n  if (sessionStorage.demo !== 'demo1') {\n    sessionStorage.demo = 'demo1';\n    location.reload();\n    return;\n  }\n  sessionStorage.demo = '';\n})();\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({});\n\n/***/ }),\n\n/***/ 370:\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(371);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(129)(\"6f199cc0\", content, true, {});\n\n/***/ }),\n\n/***/ 371:\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(91)(false);\n// imports\n\n\n// module\nexports.push([module.i, \".lt-branch{margin:14px 0;background:#fff}.lt-branch span{color:#7f8c8d;cursor:pointer;font-size:15px}.lt-branch_level_1 span{margin-left:18px;color:#2c3e50;font-weight:600;font-size:20px;cursor:auto}.lt-branch_level_0 span{color:#34495e}.lt-branch_level_2 span:hover{border-bottom:2px solid #42b983}.lt-branch_level_2 span{color:#7f8c8d}.lt-branch_active span{color:#42b983;font-weight:700}.lt-branch_level_2_active span{color:#42b983;font-weight:600}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ 372:\n/***/ (function(module, exports) {\n\nmodule.exports = [{\"name\":\"基础\",\"children\":[{\"name\":\"介绍\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"Vue.js是什么\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"起步\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"声明式渲染\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"条件与循环\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"处理用户输入\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"组件化应用构建\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"与自定义元素的关系\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"准备好了吗\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"Vue实例\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"创建一个Vue实例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数据与方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"实例生命周期钩子\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"生命周期图示\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"模板语法\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"插槽\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"文本\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"原始HTML\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"特性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"使用JavaScript表达式\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"指令\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"参数\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"缩写\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"v-bind缩写\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-on缩写\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"计算属性和侦听器\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"计算属性\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础例子\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"计算属性缓存vs方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"计算属性vs侦听属性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"计算属性的setter\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"侦听器\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"Class与Style绑定\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"绑定HTML Class\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"对象语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数组语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"用在组件上\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"绑定内联样式\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"对象语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数组语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自动添加前缀\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"多重值\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"条件渲染\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"v-if\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"在<template>元素上使用v-if条件渲染分组\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-else\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-else-if\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"用key管理可复用的元素\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"v-show\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-if vs v-show\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-if与v-for一起使用\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"列表渲染\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"用v-for把一个数组对应为一组元素\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"一个对象的v-for\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"key\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数组更新检测\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"变异方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"替换数组\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"注意事项\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"对象更改检测注意事项\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"显示过滤/排序结果\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"一段取值范围的v-for\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-for on a <template>\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-for with v-if\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"一个数组的v-for\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"事件处理\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"监听事件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"事件处理方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"内联处理器中的方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"事件修饰符\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"按键修饰符\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"自动匹配按键修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"系统修饰符\",\"parameter\":\"/abc\",\"children\":[{\"name\":\".exact修饰符\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"鼠标按钮修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"为什么在HTML中监听事件\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"表单输入绑定\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础用法\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"文本\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"多行文本\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"复选框\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单选按钮\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"选择框\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"值绑定\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"复选框\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单选按钮\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"选择框的选项\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"修饰符\",\"parameter\":\"/abc\",\"children\":[{\"name\":\".lazy\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\".number\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\".trim\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"在组件上使用v-model\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"组件基础\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基本示例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"组件的复用\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"data必须是一个函数\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"组件的组织\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"通过Prop向子组件传递数据\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单个根元素\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"通过事件向父级组件发送信息\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"使用事件抛出一个值\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"在组件上使用v-model\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"通过插槽分发内容\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"动态组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"解析DOM模板时的注意事项\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"深入了解组件\",\"children\":[{\"name\":\"组件注册\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"组件名\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"组件名大小写\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"全局组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"局部组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"模块系统\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"在模块系统中局部注册\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"基础组件的自动化全局注册\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"Prop\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"Prop的大小写\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"Prop类型\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传递静态或动态Prop\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"传入一个数字\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个布尔值\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个数组\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个对象\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个对象的所有属性\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"单项数据流\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"Prop验证\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"类型检查\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"非Prop的特性\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"替换/合并已有的特性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"禁用特性继承\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"自定义事件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"事件名\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自定义组件的v-model\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"将原生事件绑定到组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\".sync修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"插槽\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"插槽内容\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"具名插槽\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"插槽的默认内容\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"编译作用域\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"作用域插槽\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"结构slot-scope\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"动态组件&异步组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"在动态组件上使用keep-alive\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"处理加载状态\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"异步组件\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"处理边界情况\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"访问元素&组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"访问根实例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"访问父级组件实例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"访问子组件实例或子元素\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"依赖注入\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"程序化的事件侦听器\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"循环引用\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"递归组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"组件之间的循环引用\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"模板定义的替代品\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"内联模板\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"X-Templates\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"控制更新\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"强制更新\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"通过v-once创建低开销的静态组件\",\"parameter\":\"/abc\",\"children\":[]}]}]}]},{\"name\":\"过渡&动画\",\"children\":[{\"name\":\"进入/离开&列表过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"概述\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单元素/组件的过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"过渡的类名\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"CSS过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"CSS动画\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自定义过渡的类名\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"同时使用过渡和动画\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"显性的过渡持续时间\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"JavaScript钩子\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"初始渲染的过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"多个元素的过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"过渡模式\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"多个组件的过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"列表过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"列表的进入/离开过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"列表的排序过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"列表的交错过渡\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"可复用的过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"动态过渡\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"状态过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"状态动画与侦听器\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"动态状态过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"把过渡放的组件里\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"赋予设计以生命\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"可复用性&组合\",\"children\":[{\"name\":\"混入\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"选项合并\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"全局混入\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自定义选项合并策略\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"自定义指令\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"简介\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"钩子函数\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"钩子函数参数\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"函数简写\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"对象字面量\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"渲染函数&JSX\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"节点、树以及虚拟DOM\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"虚拟DOM\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"createElement参数\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"深入data对象\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"完整示例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"约束\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"使用JavaScript代替模板功能\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"v-if和v-for\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-model\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"事件&按键修饰符\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"插槽\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"JSX\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"函数式组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"向子元素或子组件传递特性和事件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"slots()和children对比\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"模板编译\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"插件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"开发插件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"使用插件\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"过滤器\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"工具\",\"children\":[{\"name\":\"生产环境部署\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"开启生产环境模式\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"模板预编译\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"提取组件的CSS\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"跟踪运行时错误\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"单文件组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"介绍\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"怎么看待关注点分离\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"起步\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"例子沙箱\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"针对刚接触JavaScript模块开发系统的用户\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"针对高级用户\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"单元测试\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"配置和工具\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"简单的断言\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"编写可被测试的组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"断言异步更新\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"TypeScript支持\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"发布为NPM包的官方声明文件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"推荐配置\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"开发工具链\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"工程创建\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"编辑器支持\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"基本用法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"基于类的Vue组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"增强类型以配合插件使用\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"标注返回值\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"模块化\",\"children\":[{\"name\":\"路由\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"官方路由\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"从零开始简单的路由\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"整合第三方路由\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"状态管理\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"类Flux状态管理的官方实现\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"React的开发者请参考以下信息\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"简单状态管理起步使用\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"服务端渲染\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"SSR完全指南\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"Nuxt.js\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"内在\",\"children\":[{\"name\":\"深入响应式原理\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"如何追踪变化\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"监测变化的注意事项\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"声明响应式属性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"异步更新队列\",\"parameter\":\"/abc\",\"children\":[]}]}]}]\n\n/***/ }),\n\n/***/ 373:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"listtree\"})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\n/* harmony default export */ __webpack_exports__[\"a\"] = (esExports);\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 0.build.js","function injectStyle (ssrContext) {\n  require(\"!!vue-loader/node_modules/vue-style-loader!css-loader?minimize!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-c3107bf0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=styles&index=0!./index.vue\")\n}\nvar normalizeComponent = require(\"!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-c3107bf0\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/demo1/index.vue\n// module id = 346\n// module chunks = 0","<template>\r\n  <div>\r\n    <branch :listData=\"listData\"\r\n            :open=\"open\"\r\n            :openOnly=\"openOnly\"\r\n            :indent=\"indent\"\r\n            :spacing=\"spacing\"\r\n            :icon=\"icon\"\r\n            :iconSize=\"iconSize\"\r\n            :animation=\"animation\"\r\n            :clickBranchIndex=\"clickBranchIndex\"\r\n            @sendClickBranchIndex=\"getClickBranchIndex\"></branch>\r\n  </div>\r\n</template>\r\n<script>\r\nimport Branch from './branch'\r\n/* eslint-disable spaced-comment */\r\nexport default {\r\n  components: {\r\n    Branch\r\n  },\r\n  name: 'mytree',\r\n  data () {\r\n    return {\r\n      clickBranchIndex: '' // -----------被点击的分支index，当用户点击branch时赋值\r\n    }\r\n  },\r\n  props: ['listData', 'open', 'openOnly', 'indent', 'spacing', 'icon', 'iconSize', 'animation'],\r\n  methods: {\r\n    getClickBranchIndex (index) {\r\n      this.clickBranchIndex = index\r\n    }\r\n    // /* createList 函数把从外部读取的数组转化为树形结构，x为代表目录信息的数组，parent为目录的父元素，t为中介参数，用来传递arr的值，arr的值包含了目录在树状结构中所处级别和位置的信息 */\r\n    // createList (x, parent, t = []) {\r\n    //   let _this = this\r\n    //   if (x.length > 0) {\r\n    //     /* 设定arr的值，使arr的长度和目录在树状结构中所处级别对应，arr内元素的值和目录位置对应。比如arr值为[0,3]时，表示该目录处于第一大类（arr第一个元素值为0）第四个分类（arr第二个元素值为3），目录的级别为第二小分类（arr长度为2）。arr值为[2]时，表示该目录处于第三大类，目录级别为大类。知道目录所处级别就可以为不同级别的目录设定不同的样式 */\r\n    //     let arr = []\r\n\r\n    //     /* 通过循环设定arr的值等于t，但不能通过arr=t来设定，这样设定的话就把arr的值和t的值绑定，改变其中一个的值就会改变另一个的值，这不是我们想要的 */\r\n    //     for (let k = 0; k < t.length; k++) {\r\n    //       arr[k] = t[k]\r\n    //     }\r\n    //     /* 每次执行 createList 函数的时候都将arr的长度增加1（创建下一级目录时都要执行 createList 函数），从而达到使arr.length与目录级别一致的目的*/\r\n    //     arr.push(0)\r\n\r\n    //     /* ellist收集了所有当前级别目录所在div，当需要改变所有目录样式的时候可以通过循环ellist来设定每个目录的样式 ，allellist则是所有目录所在div的集合，通过循环allellist可获取非本级别的目录*/\r\n    //     let ellist = []\r\n\r\n    //     /* 根据x中的各元素创建树状目录及其属性 */\r\n    //     for (let n = 0; n < x.length; n++) {\r\n    //       /* 目录展开或关闭：当目录样式名称中包含openr表示该目录是展开的，当目录样式名称中包含closer表示该目录是关闭的。反过来当要展开目录时则将目录样式添加openr，并删除closer。当要关闭目录时则将目录样式添加closer，并删除openr。 */\r\n    //       let openr = ' titleopen'\r\n    //       let closer = ' titleclose'\r\n\r\n    //       /* 创建目录 */\r\n    //       let link\r\n    //       let par = document.createElement('div')\r\n    //       let iconDiv = document.createElement('div')\r\n    //       par.appendChild(iconDiv)\r\n    //       let node = document.createTextNode(x[n].name)\r\n    //       if (!x[n].childer || x[n].childer.length === 0) {\r\n    //         link = document.createElement('a')\r\n    //         link.appendChild(node)\r\n    //         link.setAttribute('href', x[n].router)\r\n    //         par.appendChild(link)\r\n    //       } else {\r\n    //         par.appendChild(node)\r\n    //       }\r\n    //       par.style.paddingLeft = this.indentLetter + 10 + 'px'\r\n    //       par.style.marginBottom = this.branchSpace + 'px'\r\n\r\n    //       let iconDivClassName = 'iconDiv'\r\n    //       /* 当this.ifIcon为true表示目录前要带有图标，则将图标div显示，并且根据customIcon值判断是否使用自定义图标，使用自定义图标则图标div使用className为coutomIconDivOpen或者coutomIconDivClose，不使用自定义图标则图标div使用className为iconDivOpen或者iconDivClose */\r\n    //       if (this.ifIcon) {\r\n    //         iconDiv.style.display = ''\r\n    //         if (_this.customIcon.length === 0) {\r\n    //           iconDivClassName = 'iconDiv'\r\n    //         } else {\r\n    //           iconDivClassName = 'coutomIconDiv'\r\n    //         }\r\n    //       } else { // 否则表示目录前不带有图标则将图标div隐藏\r\n    //         iconDiv.style.display = 'none'\r\n    //       }\r\n\r\n    //       /* 当open等于1时，设定所有目录初始状态都是展开的 */\r\n    //       if (_this.open === 1) {\r\n    //         par.className = 'par' + openr\r\n    //         iconDiv.className = iconDivClassName + 'Open'\r\n    //         if (_this.customIcon.length !== 0) {\r\n    //           iconDiv.style.backgroundImage = 'url(' + _this.customIcon[1] + ')'\r\n    //           iconDiv.style.backgroundRepeat = 'no-repeat'\r\n    //           iconDiv.style.backgroundPosition = 'center center'\r\n    //         }\r\n    //       } else { // 当open不等于1时，设定所有目录初始状态都是关闭的\r\n    //         par.className = 'par' + closer\r\n    //         iconDiv.className = iconDivClassName + 'Close'\r\n    //         if (_this.customIcon.length !== 0) {\r\n    //           iconDiv.style.backgroundImage = 'url(' + _this.customIcon[0] + ')'\r\n    //           iconDiv.style.backgroundRepeat = 'no-repeat'\r\n    //           iconDiv.style.backgroundPosition = 'center center'\r\n    //         }\r\n    //       }\r\n\r\n    //       /* 为每个目录添加一个' treeBranch' + arr.length 样式，即给一级目录添加 treeBranch1 样式，给二级目录添加 treeBranch2 样式，给三级目录添加 treeBranch3 样式……，使得每级目录可以从外观上区别开来，并且 treeBranch 样式可以在插件外自定义*/\r\n    //       par.className = par.className + ' treeBranch' + arr.length\r\n\r\n    //       /* 每个目录下都有个box，其所有子目录都在box中 */\r\n    //       let box = document.createElement('div')\r\n    //       parent.appendChild(par)\r\n    //       parent.appendChild(box)\r\n\r\n    //       /* 设置子目录左边框相对于父目录左边框的缩进距离 */\r\n    //       box.style.paddingLeft = this.indentIcon + 'px'\r\n\r\n    //       /* child等于1的时候表示该目录下还有子目录，child等于0时表示该目录为底目录，下面已经没有子目录了。点击底目录可打开新的页面内容，点击非底目录则显示或隐藏下面的子目录 */\r\n    //       let child\r\n    //       if (x[n].childer && x[n].childer.length > 0) {\r\n    //         child = 1\r\n    //       } else {\r\n    //         child = 0\r\n    //         iconDiv.style.display = 'none'\r\n    //       }\r\n\r\n    //       /* 当open不等于1时隐藏box，即隐藏子目录，换句话说就是关闭所有目录 */\r\n    //       if (_this.open !== 1) {\r\n    //         box.style.display = 'none'\r\n    //       }\r\n    //       /* 当open等于3或4时，展开一级目录（arr.length与目录级别一致）*/\r\n    //       if ((_this.open === 3 || _this.open === 4) && arr.length === 1) {\r\n    //         par.className = par.className.replace(closer, openr)\r\n    //         iconDiv.className = iconDivClassName + 'Open'\r\n    //         if (_this.customIcon.length !== 0) {\r\n    //           iconDiv.style.backgroundImage = 'url(' + _this.customIcon[1] + ')'\r\n    //           iconDiv.style.backgroundRepeat = 'no-repeat'\r\n    //           iconDiv.style.backgroundPosition = 'center center'\r\n    //         }\r\n    //         box.style.display = ''\r\n    //         if (_this.open === 4 && arr.length === 1) {\r\n    //           iconDiv.style.display = 'none'\r\n    //         }\r\n    //       }\r\n\r\n    //       /* ------------------------点击事件--------------------------- */\r\n    //       par.onclick = function () {\r\n    //         /* 当open等于2并且当前被点击的目录为关闭状态的时候关闭所有的目录，为展开当前目录做准备（因为open等于2时在同一时间只允许展开一个目录） */\r\n    //         if (_this.open === 2 && par.className.indexOf(closer) !== -1) {\r\n    //           for (let k = 0; k < ellist.length; k++) {\r\n    //             ellist[k].par.className = ellist[k].par.className.replace(openr, closer)\r\n    //             ellist[k].iconDiv.className = iconDivClassName + 'Close'\r\n    //             if (_this.customIcon.length !== 0) {\r\n    //               ellist[k].iconDiv.style.backgroundImage = 'url(' + _this.customIcon[0] + ')'\r\n    //               ellist[k].iconDiv.style.backgroundRepeat = 'no-repeat'\r\n    //               ellist[k].iconDiv.style.backgroundPosition = 'center center'\r\n    //             }\r\n    //             ellist[k].box.style.display = 'none'\r\n    //           }\r\n    //         }\r\n\r\n    //         /* 当该目录为展开状态时，点击后闭合，当该目录为闭合状态时，点击后展开，但open等于4并且被点击的目录为一级目录时点击无效 */\r\n    //         if (_this.open !== 4 || arr.length > 1) {\r\n    //           box.style.display = box.style.display === 'none' ? '' : 'none'\r\n    //           if (par.className.indexOf(openr) !== -1) {\r\n    //             par.className = par.className.replace(openr, closer)\r\n    //             iconDiv.className = iconDivClassName + 'Close'\r\n    //             if (_this.customIcon.length !== 0) {\r\n    //               iconDiv.style.backgroundImage = 'url(' + _this.customIcon[0] + ')'\r\n    //               iconDiv.style.backgroundRepeat = 'no-repeat'\r\n    //               iconDiv.style.backgroundPosition = 'center center'\r\n    //             }\r\n    //           } else if (par.className.indexOf(closer) !== -1) {\r\n    //             par.className = par.className.replace(closer, openr)\r\n    //             iconDiv.className = iconDivClassName + 'Open'\r\n    //             if (_this.customIcon.length !== 0) {\r\n    //               iconDiv.style.backgroundImage = 'url(' + _this.customIcon[1] + ')'\r\n    //               iconDiv.style.backgroundRepeat = 'no-repeat'\r\n    //               iconDiv.style.backgroundPosition = 'center center'\r\n    //             }\r\n    //           }\r\n    //         }\r\n\r\n    //         /* 当被点击的目录为底层目录时使得该目录及其中的一个祖先目录成选中状态 */\r\n    //         if (!x[n].childer || x[n].childer.length === 0) {\r\n    //           _this.router.push(x[n].router)\r\n    //           /* 通过循环allellist里的所有元素查找被点击目录的所有祖先目录，然后通过checkedparents值来确定一级祖先目录还是二级祖先目录设定为选中状态 */\r\n    //           for (let l = 0; l < _this.allellist.length; l++) {\r\n    //             if (_this.allellist[l].child === 0) {\r\n    //               _this.allellist[l].par.className = _this.allellist[l].par.className.replace(' checkedself', '')\r\n    //             } else if (_this.checkedparents === 1) {\r\n    //               if (_this.allellist[l].arr.length === 1) {\r\n    //                 /* 当allellist[l]为一级目录（即allellist[l].arr.length === 1）时，点击它下面的子孙目录时allellist[l]的样式才会改变。 */\r\n    //                 _this.allellist[l].par.className = _this.allellist[l].par.className.replace(' checkedparents', '')\r\n    //                 if (_this.allellist[l].arr[0] === arr[0]) {\r\n    //                   /* 通过判断allellist[l].arr中第一个元素和当前arr第一个元素是否相等来判断allellist[l]是否当前点击的这个目录的祖先目录，如果是则改变allellist[l]的样式 */\r\n    //                   _this.allellist[l].par.className = _this.allellist[l].par.className + ' checkedparents'\r\n    //                 }\r\n    //               }\r\n    //             } else if (_this.checkedparents === 2) {\r\n    //               if (_this.allellist[l].arr.length === 2) {\r\n    //                 /* 当allellist[l]为二级目录（即allellist[l].arr.length === 2）时，点击它下面的子孙目录时allellist[l]的样式才会改变 */\r\n    //                 _this.allellist[l].par.className = _this.allellist[l].par.className.replace(' checkedparents', '')\r\n    //                 if (_this.allellist[l].arr[0] === arr[0] && _this.allellist[l].arr[1] === arr[1]) {\r\n    //                   /* 通过判断allellist[l].arr中前2个元素和当前arr前2个元素是否相等来判断allellist[l]是否当前点击的这个目录的祖先目录，如果是则改变allellist[l]的样式 */\r\n    //                   _this.allellist[l].par.className = _this.allellist[l].par.className + ' checkedparents'\r\n    //                 }\r\n    //               }\r\n    //             }\r\n    //           }\r\n    //           /* 改变被点击的底层目录自身为选中状态 */\r\n    //           par.className = par.className + ' checkedself'\r\n    //         }\r\n    //       }\r\n    //       /* ----------------------------------------------------------- */\r\n\r\n    //       /* 将每个目录所在div信息收集起来，这里arr必须用一个中介（thearr）来转一下，否则后面push的arr值会覆盖前面的arr值 */\r\n    //       /* ellist收集的是本级目录信息，因为创建每级目录时都会执行一次createList，而每次执行createList都会重新定义ellist，所以每个ellist收集的都是本次执行函数createList时push给ellist的值 */\r\n    //       /* allellist收集的是所有目录的信息，因为allellist是函数createList外面的数据，每次push给allellist的值都保存在allellist里面 */\r\n    //       let thearr = []\r\n    //       for (let kk = 0; kk < arr.length; kk++) {\r\n    //         thearr[kk] = arr[kk]\r\n    //       }\r\n    //       let theel = {\r\n    //         par,\r\n    //         iconDiv,\r\n    //         box,\r\n    //         child,\r\n    //         arr: thearr\r\n    //       }\r\n    //       ellist.push(theel)\r\n    //       _this.allellist.push(theel)\r\n\r\n    //       /* 如果当前创建的目录还有子目录则再执行函数createList来创建子目录，*/\r\n    //       if (x[n].childer && x[n].childer.length > 0) {\r\n    //         _this.createList(x[n].childer, box, arr)\r\n    //       } else {\r\n    //         par.className = 'par title' + arr.length\r\n    //       }\r\n\r\n    //       /* 进入下次循环前将arr最后一个元素值加1，使得arr每个元素值与对应目录所处位置一致：元素值为0表示对应的目录在同级目录中为第一个目录，元素值为1表示对应的目录在同级目录中为第二个目录 */\r\n    //       /* arr.length则与对应目录所处级别一致：arr.length为1表示该目录为一级目录，arr.length为2表示该目录为二级目录 */\r\n    //       arr[arr.length - 1]++\r\n    //     }\r\n    //   }\r\n    // }\r\n  }\r\n}\r\n</script>\r\n<style>\r\na{\r\n  color: black;\r\n  text-decoration: none;\r\n}\r\na:hover{\r\n  color: black;\r\n  text-decoration: none;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/lib/tree.vue","function injectStyle (ssrContext) {\n  require(\"!!vue-loader/node_modules/vue-style-loader!css-loader?minimize!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-491d7a19\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=styles&index=0!./branch.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./branch.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./branch.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-491d7a19\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=template&index=0!./branch.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/branch.vue\n// module id = 348\n// module chunks = 0 1","module.exports = __webpack_public_path__ + \"iconfont.eot?a5f8db96505701301350ff3d0cd3948d\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/icon/iconfont.eot?t=1530402100306\n// module id = 349\n// module chunks = 0 1","<template>\r\n<div>\r\n  <div v-for=\"(item, index) in listData\" :key=\"index\">\r\n    <!-- ========= branch ===========树形结构中每个目录为一个独立的分支（branch），一级branch的index为X，二级branch的index为：X-X，三级branch的index为：X-X-X，以此类推 -->\r\n    <!-- 层的编号（index）设计规则：一级分支用一个数字表示，二级用2个数字中间连一个“-”表示，三级分支用三个数字，每个数字中间连“-”……，比如：A-B-C-D-……，其中A表示所属一级分支编号，B表示所属二级分支编号，C表示所属三级分支编号……； -->\r\n    <!-- id 前缀命名规则：branch的前缀为 lt-branch_ ，图标层的前缀为 lt-branch-icon_ ，图标基座的前缀为 lt-branch-icon-bg_ ，animation(动画)层前缀为：lt-branch-animation_，box层的前缀为 lt-branch-box_ 。层的 id 就是：前缀+编号 -->\r\n    <!-- className 规则：所有分支branch都含有 lt-branch，所有的图标都包含：lt-branch-icon；所有一级分支都包含 lt-branch_level_1，二级分支包含：lt-branch_level_2，三级分支包含：lt-branch_level_3……；所有一级分支图标都包含：lt-branch-icon_level_1，所有二级分支图标包含：lt-branch-icon_level_2，所有三级图标包含：lt-branch-icon_level_3……，如果一个分支下面没有下级分支，那么该分支将包含：lt-branch-icon_level_0；当前被点击的分支包含：lt-branch_active，当前被点击的分支图标包含：lt-branch-icon_active，一级分支下级子孙分支被点击后该一级分支将包含：lt-branch_level_1_active，该一级分支的图标将包含： lt-branch-icon_level_1_active，二级分支下级子孙分支被点击后该二级分支将包含：lt-branch_level_2_active，该二级分支的图标将包含： lt-branch-icon_level_2_active，三级分支下级子孙分支被点击后该三级分支将包含：lt-branch_level_3_active，该三级分支的图标将包含： lt-branch-icon_level_3_active……。后面带有active的分支表示正在活动的分支，但只有点击可以打开新路由内容的branch（即在listData中该branch包含parameter属性）才能触发active。 -->\r\n    <div :id=\"'lt-branch_'+(branchLevel+(index+1))\"\r\n         :data-index=\"branchLevel+(index+1)\"\r\n         :class=\"branchClassName(branchLevel+(index+1))\"\r\n         :style=\"branchStyle(branchLevel+(index+1))\"\r\n         @click.prevent=\"clickBranch(branchLevel+(index+1), item.parameter)\">\r\n      <div :id=\"'lt-branch-icon-bg_'+(branchLevel+(index+1))\"\r\n           class='lt-branch-icon-Bg'\r\n           :style=\"branchIconBgStyle\"\r\n           v-if=\"(getIcon(branchLevel+(index+1))&&item.children&&item.children.length>0)||(item.icon!==undefined&&item.icon.length===2)\">\r\n        <span :id=\"'lt-branch-icon_'+(branchLevel+(index+1))\"\r\n              :class='branchIconClassName(branchLevel+(index+1))'\r\n              :style=\"branchIconStyle(branchLevel+(index+1))\"\r\n              v-if=\"(control['lt-branch-icon_'+(branchLevel+(index+1))]==='show')||(item.icon!==undefined&&item.icon.length===2)\"></span>\r\n      </div><span>{{item.name}}</span>\r\n    </div>\r\n    <!--=============== animation ================= 每个branch下都有个animation层，是用来实现伸缩动画的 -->\r\n    <div v-if=\"item.children&&item.children.length>0\"\r\n         :id=\"'lt-branch-animation_'+(branchLevel+(index+1))\"\r\n         :style=\"branchAnimationStyle(branchLevel+(index+1))\">\r\n      <!--=============== box ================= 每个branch下都有个box层，branch所有的下级分支都在box内，branch的展开和闭合就可以用box的显示隐藏来实现。另外box与左边框的距离可以实现上下级branch的缩进 -->\r\n      <div :id=\"'lt-branch-box_'+(branchLevel+(index+1))\"\r\n          :style=\"branchBoxStyle(branchLevel+(index+1), item.children)\">\r\n        <branch :listData=\"item.children\"\r\n                :open=\"open\"\r\n                :openOnly=\"openOnly\"\r\n                :indent=\"indent\"\r\n                :spacing=\"spacing\"\r\n                :icon=\"icon\"\r\n                :iconSize=\"iconSize\"\r\n                :animation=\"animation\"\r\n                :clickBranchIndex=\"clickBranchIndex\"\r\n                @sendClickBranchIndex=\"getClickBranchIndex\"\r\n                :branchLevel=\"branchLevel+(index+1)+'-'\"\r\n                :depth=\"depth+1\"\r\n                v-if=\"item.children&&item.children.length>0\"></branch>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</template>\r\n<script>\r\nimport Branch from './branch'\r\nimport IconFont from './icon.json'\r\n\r\nexport default {\r\n  name: 'branch',\r\n  data () {\r\n    return {\r\n      control: {}, // -----------------控制各个branch,box,icon的展开或闭合状态\r\n      animationTime: 0 // -----------动画执行时间\r\n    }\r\n  },\r\n  components: {\r\n    Branch\r\n  },\r\n  props: {\r\n    branchLevel: { // ---------分支级别，顶级分支为x，二级分支为x-x，三级分支为x-x-x，以此类推，系统会自动分别一级一级往下传递\r\n      default: 0\r\n    },\r\n    depth: { // ------------分支级别的深度，一级分支深度为0，二级分支深度为1，三级分支深度为2，以此类推，系统会自动分别一级一级往下传递\r\n      default: 0\r\n    },\r\n    clickBranchIndex: '', // -----------被点击的分支index，用户在分支上点击（处于组件branch.vue中）后会触发sendClickBranchIndex事件，上一级组件（上一级branch.vue）监听到sendClickBranchIndex后再运行gitClickBranchIndex事件，gitClickBranchIndex事件里又触发sendClickBranchIndex事件往上传递，一直到组件tree.vue监听到sendClickBranchIndex事件后更改data中的clickBranchIndex，tree.vue下所有的组件都会接受到clickBranchIndex的更改\r\n    // -------------------------------------------以上props内容用户不能控制，以下props用户可以设置-------------------------------\r\n    listData: { // -----------json格式的数据，每个分支目录有name,parameter,icon,children四个个字段，name为分支的文字内容（必须有）。parameter为点击分支时跳转的路由地址,如果不跳转可省略parameter字段。icon为该分支前的图标地址（包括展开时和闭合时的图标，所以icon是个数组），如果使用默认图标icon字段可以省略。children为该分支的下级分支，如果没有下级分支children字段也可以省略\r\n      default: function () {\r\n        return []\r\n      }\r\n    },\r\n    open: {// --设置初始状态下各分支展开或闭合情况:0为全部闭合，1为全部展开；2第一个分支展开其他都闭合，且同级分支始终只能有一个展开；3除了一级分支展开，其他分支全都闭合；4除了一级分支展开，其他分支全都闭合，并且一级分支不能闭合，一级分支没有图标\r\n      default: 1\r\n    },\r\n    openOnly: {\r\n      default: 0\r\n    },\r\n    indent: { // -----子级分支相对父级分支的缩进距离\r\n      default: 24\r\n    },\r\n    spacing: { // ---------图标与文字之间的距离\r\n      default: 20\r\n    },\r\n    icon: {\r\n      default: 1 // ------icon等于0时表示用户不需要图标，为大于0的整数时为系统自带的图标，为数组时为自定义图标（Font-Awesome和阿里巴巴图标）作为图标，数组第一个元素为闭合时图标，第二个元素为展开时图标或者是闭合图标需要旋转的角度，当数组内元素为图片地址时，也可以用自定义图片做图标\r\n    },\r\n    iconSize: { // -----设置图标大小\r\n      default: 25\r\n    },\r\n    animation: { // ---animation设为false时不使用动画\r\n      default: 1\r\n    }\r\n  },\r\n  methods: {\r\n    clickBranch (index, parameter) { // -----------------------------branch 点击事件--------------------------------\r\n      if (this.control['lt-branch_' + index][0] === 'always') return false\r\n      /* 如果没有动画，那么点击branch时直接就修改control值，否则就在执行完动画后在doAnimation中修改control值 */\r\n      if (this.animation !== false) {\r\n        this.doAnimation(this.getChildBranchIndex(index), index)\r\n        if (!isNaN(parseInt(this.getIcon[1]))) this.doRotate(index)\r\n      } else {\r\n        this.setControl(index)\r\n      }\r\n      if (typeof(this.$listClick) === \"function\") {\r\n        this.$listClick(parameter) // ----branch被点击时传递parameter给插件外的组件，插件外的组件通过给Vue的原型添加方法$listClick来获取参数parameter，并进行一系列的操作\r\n      }\r\n\r\n      if (parameter) {\r\n        this.$emit('sendClickBranchIndex', index)\r\n      }\r\n      return false\r\n    },\r\n    getChildBranchIndex (index) { // ----- 获取子分支index，用于动画展现（只获取显示的子分支，隐藏状态的不获取）\r\n      let n = 1\r\n      let arr = []\r\n      while (document.getElementById('lt-branch_' + index + '-' + n)) {\r\n        arr.push(index + '-' + n)\r\n        let elBox = document.getElementById('lt-branch-animation_' + index + '-' + n)\r\n        if (elBox && elBox.style.display !== 'none') {\r\n          arr.push(...this.getChildBranchIndex (index + '-' + n))\r\n        }\r\n        n++\r\n      }\r\n      return arr\r\n    },\r\n    doAnimation (arr, index) { // ----------执行动画\r\n      let elBox = document.getElementById('lt-branch-animation_' + index)\r\n\r\n      if (elBox) {\r\n        elBox.style.display = ''\r\n        let enterLeave\r\n        if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 1) { // --当前为展开状态则将要执行的是收缩动画\r\n          arr = arr.reverse() // -----反转数组，即动画从最后一个子分支开始执行\r\n          enterLeave = 'leave'\r\n          setTimeout(() => {\r\n            this.setControl(index)\r\n            elBox.style.display = 'none'\r\n          }, arr.length * 50 + 200)\r\n        } else if (this.control['lt-branch_' + index][0] === 'close' || this.control['lt-branch_' + index][0] === 0) {\r\n          enterLeave = 'enter'\r\n          this.setControl(index)\r\n          elBox.style.display = ''\r\n        }\r\n        for (let n = 0; n < arr.length; n++) {\r\n          let elBranch = document.getElementById('lt-branch_' + arr[n])\r\n          if (elBranch) {\r\n            elBranch.className = elBranch.className.replace(' enter-start', '').replace(' leave-start', '').replace(' enter-end', '').replace(' leave-end', '')\r\n            if (enterLeave === 'leave') elBranch.className += ' leave-start' // ----展开的动画起始样式在这里，为了避免display的干扰收缩的动画样式必须在display改变之后\r\n            elBranch.style.display = enterLeave === 'leave' ? 'block' : 'none'\r\n            if (typeof arr[n] === 'string') {\r\n              setTimeout(() => { // -----相邻的分支之间执行动画相隔80微秒\r\n                if (enterLeave === 'leave') {\r\n                  elBranch.className += ' leave-end'\r\n                  setTimeout(() => {\r\n                    elBranch.style.display = 'none' // ---用setTimeout是因为必须在展开动画执行完后才隐藏分支，同时也能避免display的改变对展开动画的干扰\r\n                  }, 300)\r\n                } else if (enterLeave === 'enter') {\r\n                  elBranch.style.display = 'block'\r\n                  elBranch.className += ' enter-start' // ----- 收缩的动画放在这里开始是为了避免display的干扰\r\n                  setTimeout(() => {\r\n                    elBranch.className += ' enter-end' // ----这里如果不用setTimeout的话css3动画不能执行\r\n                  }, 100)\r\n                }\r\n              }, 50 * n)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    },\r\n    doRotate (index) { // -------图标旋转动画\r\n      let elIcon = document.getElementById('lt-branch-icon_' + index)\r\n      if (elIcon) {\r\n        elIcon.style.transition = 'all .3s'\r\n        if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 1) { // --当前为展开状态则将要执行的是收缩动画\r\n          setTimeout(() => {\r\n            elIcon.style.transform = elIcon.style.transform.replace(/rotate\\(\\d*deg\\)/, '')\r\n            elIcon.style.transform += ' rotate(0deg)'\r\n          }, 0)\r\n        } else if (this.control['lt-branch_' + index][0] === 'close' || this.control['lt-branch_' + index][0] === 0) {\r\n          setTimeout(() => {\r\n            elIcon.style.transform = elIcon.style.transform.replace(/rotate\\(\\d*deg\\)/, '')\r\n            elIcon.style.transform += ` rotate(${parseInt(this.getIcon(index)[1])}deg)`\r\n          }, 0)\r\n        }\r\n      }\r\n    },\r\n    setControl (index) { // -----设置this.control['lt-branch_' + index][0]的值，该值决定branch是展开还是闭合\r\n      if (this.openOnly === 1) { // -------openOnly为1时通过循环将所有同级别的branch都关闭确保同级别只能展开一个分支\r\n        let n = 1\r\n        let el\r\n        do {\r\n          if ((this.branchLevel + n) !== index) {\r\n            this.control['lt-branch_' + (this.branchLevel + n)][0] = 'close'\r\n            // this.renewStyle([this.branchLevel + n]) // -------------------------这里renewStyle刷新的是所有同级的分支样式，函数结尾的renewStyle刷新的只是被点击的分支的style\r\n          }\r\n          n++\r\n          el = document.getElementById('lt-branch_' + (this.branchLevel + n))\r\n        } while (el)\r\n      }\r\n\r\n      if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 1) {\r\n        this.$set(this.control, 'lt-branch_' + index, ['close'])\r\n      } else if (this.control['lt-branch_' + index][0] === 'close' || this.control['lt-branch_' + index][0] === 0) {\r\n        this.$set(this.control, 'lt-branch_' + index, ['open'])\r\n      }\r\n    },\r\n    getClickBranchIndex (index) { // ---------------------------------获取当前点击的branch的index，\r\n      this.$emit('sendClickBranchIndex', index) // ---------并把该index值通过自定义事件传给父组件\r\n    },\r\n    branchStyle (id) { // --------branch的样式\r\n      let branchStyle = ''\r\n      if (this.control['lt-branch_' + id][0] === 'open' || this.control['lt-branch_' + id][0] === 1 || this.control['lt-branch_' + id][0] === 'always') {\r\n        branchStyle = this.branchOpenStyle\r\n      } else {\r\n        branchStyle = this.branchCloseStyle\r\n      }\r\n      return `position: relative;\r\n              text-align: left;\r\n              ${branchStyle}`\r\n    },\r\n    branchIfShow (index) {\r\n      if (this.depth > 0) { // -------一级分支永远都应该显示且一级分支没有父级分支，所以这里把一级分支排除不进行判断\r\n        let parentIndex = this.branchLevel.toString().split('-').slice(0, -1).join('-')\r\n        if (this.parentControl['lt-branch_' + parentIndex][0] === 'close' || this.parentControl['lt-branch_' + parentIndex][0] === 0) {\r\n          return false\r\n        } else {\r\n          return true\r\n        }\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    branchClassName (id) { // ------------branch的className\r\n      let branchClass = ''\r\n      let theId = id.toString()\r\n      let theChildren = ''\r\n      let theData = ''\r\n\r\n      if (this.depth === 0) { // --获取branch的children值，如果该branch没有children(即没有子分支)，就给它加上lt-branch_level_0样式\r\n        theData = this.listData[id - 1]\r\n        if (theData.children) theChildren = theData.children\r\n      } else {\r\n        theData = this.listData[theId.replace(this.branchLevel, '') - 1]\r\n        if (theData.children) theChildren = theData.children\r\n      }\r\n\r\n      branchClass = 'lt-branch lt-branch_level_' + (this.depth + 1) // --------添加常规分支className和当前级别的className\r\n      if (theChildren.length === 0) { // ------如果branch没有子分支，就给branch加上 lt-branch_level_0 样式\r\n        branchClass += ' lt-branch_level_0'\r\n      }\r\n      if (theId.toString() === this.clickBranchIndex.toString().substring(0, theId.length)) { // ------判断是否为当前active状态branch的祖先，如果是就加上active状态的className\r\n        branchClass += ' lt-branch_level_' + (this.depth + 1) + '_active'\r\n      }\r\n      /* 用被点击分支index减掉当前分支的index剩余部分包含一个\"-\"，即表示当前分支仅仅比被点击分支高一级（如果高一级以上，那么replace后剩余部分一定会包含多个\"-\"），为了消除特殊index带来的buger，在判断的时候clickBranchIndex和theId前都加了一个字母，并且最后得加一个判断：\"-\"在第一个位置 */\r\n      let str = ('a' + this.clickBranchIndex.toString()).replace(('a' + theId.toString()), '')\r\n      if ((str.split('-').length - 1 === 1) && str.indexOf('-') === 0) {\r\n        branchClass += ' lt-branch_active_parent'\r\n      }\r\n      if (theId.toString() === this.clickBranchIndex.toString()) { // ------判断是否为当前active状态branch，如果是就加上active状态的className\r\n        branchClass += ' lt-branch_active'\r\n      }\r\n      return branchClass\r\n    },\r\n    getIcon (index) { // ---------图标来源（权重：listData > 参数icon > icon.json。如果一个branch没有子级，那么这个branch没有图标，但如果listData中该branch包含icon属性，那么这个branch哪怕没有子级它也有自己的图标）\r\n      /* 从listData读取icon */\r\n      let arr = index.toString().split('-')\r\n      let privateIcon = this.listData[arr[arr.length - 1] - 1].icon\r\n      if (privateIcon !== undefined && privateIcon.length === 2) {\r\n        return privateIcon\r\n      }\r\n      /* 从用户输入的参数icon 和 icon.json（默认）读取icon */\r\n      let icon = this.icon\r\n      if (icon === '' || icon === 'undefined') icon = 1\r\n      if (!isNaN(parseInt(icon))) {\r\n        if (icon === 0 || icon === false) return false // -----icon等于0或者false时不显示图标\r\n        icon = IconFont['icon' + icon] // ----------把icon.json里的数据赋予icon\r\n      }\r\n\r\n      return icon // -----不管用户是使用系统默认图标、自定义图片还是使用第三方图标或者在listData中定义图标，icon都为数组，数组第一个元素为展开时的图标，第二个元素为闭合时图标（数组元素可能是图片地址，也可能是代表第三方图标的className）\r\n    },\r\n    iconCloseStyle (index) { // -----图标闭合时的样式\r\n      if (this.getIcon(index)[0].indexOf('/') > -1) { // -----------this.getIcon中的元素包含“/”说明用户使用自定义图片作为图标\r\n        return `position: absolute;\r\n                top: 0;\r\n                left: 0;\r\n                bottom: 0;\r\n                right: 0;\r\n                font-size:${this.iconSize}px;\r\n                background: url('${this.getIcon(index)[0]}') center no-repeat;`\r\n      } else { // ---------------------------------------------此时用户使用默认图标或第三方图标库来作为图标\r\n        return `position: absolute;\r\n                font-size:${this.iconSize}px;\r\n                top: 50%;\r\n                transform: translateY(-50%);`\r\n      }\r\n    },\r\n    iconOpenStyle (index) { // -----图标展开时的样式\r\n      if (isNaN(parseInt(this.getIcon(index)[1]))) { // ---如果this.getIcon(index)第二个元素不是纯数字，它一定是与第一个元素代表完全不一样的图片或className。\r\n        if (this.getIcon(index)[0].indexOf('/') > -1) { // -----------this.getIcon中的元素包含“/”说明用户使用自定义图片作为图标\r\n          return `position: absolute;\r\n                  top: 0;\r\n                  left: 0;\r\n                  bottom: 0;\r\n                  right: 0;\r\n                  font-size: ${this.iconSize}px;\r\n                  background: url('${this.getIcon(index)[1]}') center no-repeat;`\r\n        } else { // ---------------------------------------------此时用户使用默认图标或第三方图标库来作为图标\r\n          return `position: absolute;\r\n                  font-size:${this.iconSize}px;\r\n                  top: 50%;\r\n                  transform: translateY(-50%);`\r\n        }\r\n      } else { // ---如果this.getIcon(index)第二个元素是纯数字，它表示与第一个元素是一样的图片或className，只是需要顺时针旋转一个角度。\r\n        let transform\r\n        if (this.getIcon(index)[0].indexOf('/') > -1) { // ----如果是图片不需要上移\r\n          transform = `transform: rotate(${this.getIcon(index)[1]}deg);`\r\n        } else {\r\n          transform = `transform: translateY(-50%) rotate(${this.getIcon(index)[1]}deg);`\r\n        }\r\n        return `${this.iconCloseStyle(index)}\r\n                ${transform}`\r\n      }\r\n    },\r\n    iconCloseClassName (index) { // ----------闭合时图标层的className\r\n      if (!this.getIcon(index)) return ''\r\n      if (this.getIcon(index)[0].indexOf('/') === -1) { // ---如果图标使用的不是图片（图片地址一定含有“/”）\r\n        return this.getIcon(index)[0]\r\n      }\r\n      return ''\r\n    },\r\n    iconOpenClassName (index) { // ----------展开时图标层的className\r\n      if (!this.getIcon(index)) return ''\r\n      if (isNaN(parseInt(this.getIcon(index)[1])) && this.getIcon(index)[1].toString().indexOf('/') === -1) { // ---如果this.getIcon(index)第二个元素不是纯数字并且图标使用的不是图片（图片地址一定含有“/”）\r\n        return this.getIcon(index)[1]\r\n      } else if (!isNaN(parseInt(this.getIcon(index)[1]))) { // ---this.getIcon(index)第二个元素是纯数字，展开时图标层的className和闭合时图标层的className应该一样，只是在设置style时旋转一定的角度就可以了（角度的度数是this.getIcon(index)）\r\n        return this.getIcon(index)[0]\r\n      }\r\n      return ''\r\n    },\r\n    branchIconStyle (index) { // ---------------------------------图标的样式-------------------------\r\n      if (this.icon === 0) return ''\r\n      let elIndex = document.getElementById('lt-branch-icon_' + index)\r\n      let iconStyle\r\n      if (elIndex) iconStyle = elIndex.style.cssText\r\n      if (this.clickBranchIndex !== index || this.animation === false) { // ----禁止当前正处于动画状态的图标改变状态\r\n        if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 'always' || this.control['lt-branch_' + index][0] === 1) { // ----------分支展开或闭合的情况\r\n          iconStyle = this.iconOpenStyle(index)\r\n        } else {\r\n          iconStyle = this.iconCloseStyle(index)\r\n        }\r\n      }\r\n      return iconStyle\r\n    },\r\n    branchIconClassName (index) { // ---------------图标的className(当使用默认图标或第三方图标库时需要设定className)-------------------\r\n      let iconClass = ''\r\n      if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 'always' || this.control['lt-branch_' + index][0] === 1) {\r\n        iconClass += this.iconOpenClassName(index)\r\n      } else {\r\n        iconClass += this.iconCloseClassName(index)\r\n      }\r\n\r\n      iconClass += ' lt-branch-icon lt-branch-icon_level_' + (this.depth + 1) // --------添加常规分支图标className和当前级别图标的className\r\n      let theId = index.toString()\r\n      let theChildren = ''\r\n      let theData = ''\r\n\r\n      if (this.depth === 0) { // --获取branch的children值，如果该branch没有children(即没有子分支)，就给它加上lt-branch_level_0样式\r\n        theData = this.listData[index - 1]\r\n        if (theData.children) theChildren = theData.children\r\n      } else {\r\n        theData = this.listData[theId.replace(this.branchLevel, '') - 1]\r\n        if (theData.children) theChildren = theData.children\r\n      }\r\n\r\n      if (theChildren.length === 0) { // ------如果branch没有子分支，就给branch加上 lt-branch-icon_level_0 样式\r\n        iconClass += ' lt-branch-icon_level_0'\r\n      }\r\n      if (theId.toString() === this.clickBranchIndex.toString().substring(0, theId.length)) { // ------判断是否为当前active状态branch的祖先，如果是就加上active状态的className\r\n        iconClass += ' lt-branch-icon_level_' + (this.depth + 1) + '_active'\r\n      }\r\n      if (theId.toString() === this.clickBranchIndex.toString()) { // ------判断是否为当前active状态branch，如果是就加上active状态的className\r\n        iconClass += ' lt-branch-icon_active'\r\n      }\r\n      /* 用被点击分支index减掉当前分支的index剩余部分包含一个\"-\"，即表示当前分支仅仅比被点击分支高一级（如果高一级以上，那么replace后剩余部分一定会包含多个\"-\"），为了消除特殊index带来的buger，在判断的时候clickBranchIndex和theId前都加了一个字母，并且最后得加一个判断：\"-\"在第一个位置 */\r\n      let str = ('a' + this.clickBranchIndex.toString()).replace(('a' + index.toString()), '')\r\n      if ((str.split('-').length - 1 === 1) && str.indexOf('-') === 0) {\r\n        iconClass += ' lt-branch-icon_active_parent'\r\n      }\r\n      return iconClass\r\n    },\r\n    branchAnimationStyle (id) { // ----animation的样式\r\n      let theStyle = ''\r\n      if (this.control['lt-branch_' + id][0] === 'open' || this.control['lt-branch_' + id][0] === 'always' || this.control['lt-branch_' + id][0] === 1) {\r\n        theStyle += this.animationOpenStyle\r\n      } else if (this.control['lt-branch_' + id][0] === 'close' || this.control['lt-branch_' + id][0] === 0) {\r\n        theStyle += this.animationCloseStyle\r\n      }\r\n      return theStyle\r\n    },\r\n    branchBoxStyle (id) { // -------------------------------------box的样式-----------------------\r\n      return `margin:0px;\r\n              padding:0px;\r\n              border:0px;\r\n              ${this.boxStyle}`\r\n    },\r\n    // doAnimation (id, parameter) { // --------------------------------展开收缩动画--------------------------------------------\r\n    //   if (this.control['lt-branch_' + id][0] !== 'always') { // --该branch的open值为always时不执行动画，因为该分支不能被闭合\r\n    //     let elAnimation = document.getElementById('lt-branch-animation_' + id)\r\n    //     elAnimation.style.display = 'block'\r\n    //     let elBox = document.getElementById('lt-branch-box_' + id)\r\n    //     let boxH = elBox.offsetHeight\r\n    //     let animationH = elAnimation.offsetHeight\r\n    //     elAnimation.style.overflowY = 'hidden'\r\n    //     /* 发现将overflow设为hidden后，div里的内容和边框的距离会增加， 所以这里暂时将elBox的margin-top设为负值以抵消和边框距离的增加 */\r\n    //     // elBox.style.marginTop = '-15px'\r\n\r\n    //     let addHeight = boxH / 10 // -----每次增加或减小的高度\r\n    //     if (this.control['lt-branch_' + id][0] === 'close' || this.control['lt-branch_' + id][0] === 0) { // ---执行展开动画\r\n    //       elAnimation.style.height = (animationH + addHeight) + 'px'\r\n    //       if (animationH > boxH || animationH === boxH) { // -------如果elAnimation的高大于elBox的高，把elAnimation的style设为animationOpenStyle，同时退出循环\r\n    //         // elAnimation.style.cssText = this.animationOpenStyle\r\n    //         if (parameter) {\r\n    //           this.$emit('sendClickBranchIndex', id)\r\n    //         }\r\n    //         elBox.style.marginTop = ''\r\n    //         this.setControl(id)\r\n    //       } else if (this.control['lt-branch_' + id][0] === 'close' || this.control['lt-branch_' + id][0] === 0) { // ---执行闭合动画\r\n    //         elAnimation.style.height = (animationH + addHeight) + 'px'\r\n    //         setTimeout(() => {\r\n    //           this.doAnimation(id, parameter)\r\n    //         }, this.animationTime)\r\n    //       }\r\n    //     } else {\r\n    //       if (animationH < addHeight || animationH === addHeight) { // -------如果elAnimation的高小于等于addHeight，把elAnimation的style设为animationCloseStyle，同时退出循环\r\n    //         // elAnimation.style.cssText = this.animationCloseStyle\r\n    //         if (parameter) {\r\n    //           this.$emit('sendClickBranchIndex', id)\r\n    //         }\r\n    //         elBox.style.marginTop = ''\r\n    //         this.setControl(id)\r\n    //       } else {\r\n    //         elAnimation.style.height = (animationH - addHeight) + 'px'\r\n    //         setTimeout(() => {\r\n    //           this.doAnimation(id, parameter)\r\n    //         }, this.animationTime)\r\n    //       }\r\n    //     }\r\n    //   }\r\n    // },\r\n    // doRotate (index, direction) { // --------------------图标旋转动画，direction等于1表示顺时针旋转，等于-1表示逆时针旋转\r\n    //   console.log(index + '|||')\r\n    //   let elIcon = document.getElementById('lt-branch-icon_' + index)\r\n    //   if (elIcon && this.animation !== false && !isNaN(parseInt(this.getIcon(index)[1])) && this.control['lt-branch_' + index][0] !== 'always') {\r\n    //     let transformIcon = elIcon.style.transform\r\n    //     let translateY = ''\r\n    //     let angle = 0\r\n    //     if (transformIcon.indexOf('translateY(-50%)') > -1) translateY = 'translateY(-50%)'\r\n    //     if (transformIcon.indexOf('rotate') > -1) {\r\n    //       angle = parseInt(transformIcon.split('rotate(')[1].split('deg)')[0])\r\n    //     }\r\n    //     if (!direction) {\r\n    //       if (this.control['lt-branch_' + index][0] === 'close' || this.control['lt-branch_' + index][0] === 0) {\r\n    //         direction = 1\r\n    //       } else if (this.control['lt-branch_' + index][0] === 'open' || this.control['lt-branch_' + index][0] === 1) {\r\n    //         direction = -1\r\n    //       }\r\n    //     }\r\n\r\n    //     let maxAngle = parseInt(this.getIcon(index)[1]) // -----图标旋转所能达到的最大角度，即展开的时候图标需要旋转的角度\r\n    //     let rotateAngle = maxAngle / 10 // -----图标每次旋转的角度\r\n\r\n    //     if (direction === 1) { // ---执行展开动画\r\n    //       elIcon.style.transform = `${translateY} rotate(${angle + rotateAngle}deg)`\r\n    //       if (parseInt(angle + rotateAngle) > maxAngle || parseInt(angle + rotateAngle) === maxAngle) { // -------如果elIcon旋转的角度大于等于maxAngle，把elIcon旋转的角度设为maxAngle，同时退出循环\r\n    //         elIcon.style.transform = `${translateY} rotate(${maxAngle}deg)`\r\n    //         return\r\n    //       }\r\n    //     } else {\r\n    //       elIcon.style.transform = `${translateY} rotate(${angle - rotateAngle}deg)`\r\n    //       if (parseInt(angle - rotateAngle) < 0 || parseInt(angle - rotateAngle) === 0) { // -------如果elIcon旋转的角度小于等于0，把elIcon旋转的角度设为0，同时退出循环（elIcon旋转的角度为0的时候即会到展开时图标的初始状态）\r\n    //         elIcon.style.transform = `${translateY} rotate(0deg)`\r\n    //         return\r\n    //       }\r\n    //     }\r\n\r\n    //     setTimeout(() => {\r\n    //       this.doRotate(index, direction)\r\n    //     }, this.animationTime)\r\n    //   }\r\n    // }\r\n  },\r\n  computed: {\r\n    branchIconBgStyle () { // ----图标背景层距离左边的距离，控制图标的位置\r\n      return `left: ${this.indent * this.depth}px;`\r\n    },\r\n    branchOpenStyle () { // ---branch展开时的样式\r\n      return `padding-left: ${this.indent * this.depth + this.spacing}px;`\r\n    },\r\n    branchCloseStyle () { // ---branch闭合时的样式\r\n      return `padding-left: ${this.indent * this.depth + this.spacing}px;`\r\n    },\r\n    animationOpenStyle () {\r\n      return `margin:0px;\r\n              padding:0px;\r\n              border:0px;`\r\n    },\r\n    animationCloseStyle () {\r\n      return `margin:0px;\r\n              padding:0px;\r\n              border:0px;\r\n              height:0px;\r\n              display:none;`\r\n    },\r\n    boxStyle () {\r\n      return ''\r\n    }\r\n  },\r\n  created () {\r\n    /*\r\n    将类似于下面 control 的值赋给data中的control，这样的话，就可通过this.control.branchLevel1[0]的值来控制分支branchLevel1的展开或闭合。其中branchLevel1中的1与每个分支中的data-index相同，这样每个分支在control中都有个对应的值来控制和判断它的状态。\r\n    control: {\r\n      lt-branch_1: ['close'],\r\n      lt-branch_2: ['close'],\r\n      lt-branch_3: ['close'],\r\n    }\r\n     */\r\n    for (let n = 1; n < this.listData.length + 1; n++) {\r\n      this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), ['close']) // ----------默认情况，所有branch都为闭合状态(数组第一个元素表示branch的展开或闭合状态['open'为展开，'close'为闭合]\r\n      this.$set(this.control, 'lt-branch-icon_' + (this.branchLevel + n), 'show') // ----------默认情况，所有icon都为显示状态('show'为显示，'hidden'为隐藏)\r\n\r\n      if (this.open === 1) {\r\n        this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), ['open']) // ----------当open值为1时，所有branch都为展开状态\r\n      } else if (typeof this.open === 'object') {\r\n        /* 当open为数组时，根据当前分支所处级别以及open中与该级别对应的元素来确定当前分支是“open”、“close”还是“always”状态。其中一级分支状态对应open第一个元素值， 二级分支状态对应open第二个元素值，以此类推。如果open长度不够，那当前级别的分支状态对应open最后一个元素的值 */\r\n        if (this.open.length > this.depth + 1 || this.open.length === this.depth + 1) {\r\n          this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), [this.open[this.depth]])\r\n        } else {\r\n          this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), [this.open[this.open.length - 1]])\r\n        }\r\n      }\r\n      if (this.openOnly === 1 && this.control['lt-branch_' + (this.branchLevel + n)][0] !== 'always') {\r\n        this.$set(this.control, 'lt-branch_' + (this.branchLevel + n), ['close'])\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style>\r\n@import url(\"./icon/iconfont.css\");\r\n\r\n.iconfont {\r\n    font-family:\"iconfont\" !important;\r\n    font-style:normal;\r\n    font-weight: normal;\r\n    -webkit-font-smoothing: antialiased;\r\n    -webkit-text-stroke-width: 0.2px;\r\n    -moz-osx-font-smoothing: grayscale;\r\n}\r\n.lt-branch-icon-Bg{\r\n  width: 20px;\r\n  height: 20px;\r\n  position: absolute;\r\n  transform:translateY(-50%);\r\n  top: 50%;\r\n  left: 0;\r\n}\r\n.enter-start {\r\n  transform:translateX(-25px);\r\n  opacity: 0;\r\n  transition: all .3s;\r\n}\r\n.enter-end {\r\n  transform:translateX(0px);\r\n  opacity: 1;\r\n}\r\n.leave-start {\r\n  transform:translateX(0px);\r\n  opacity: 1;\r\n  transition: all .3s;\r\n}\r\n.leave-end {\r\n  transform:translateX(-25px);\r\n  opacity: 0;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/lib/branch.vue","import ListTree from './tree'\r\nconsole.log('object')\r\nconst tree = {\r\n  install (Vue, o) {\r\n    var ele = '.listtree'\r\n    if (ele) {\r\n      o.el && (ele = o.el)\r\n      const LTree = Vue.extend(ListTree)\r\n      const listtree = new LTree({propsData: {\r\n        listData: o.listData,\r\n        open: o.open,\r\n        openOnly: o.openOnly,\r\n        indent: o.indent,\r\n        spacing: o.spacing,\r\n        icon: o.icon,\r\n        iconSize: o.iconSize,\r\n        animation: o.animation\r\n      }})\r\n      setTimeout(() => {\r\n        listtree.$mount(ele)\r\n      }, 0)\r\n    }\r\n  }\r\n}\r\nif (typeof window !== 'undefined' && window.Vue) {\r\n  window.Vue.use(tree)\r\n}\r\nexport default tree\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/index.js","function injectStyle (ssrContext) {\n  require(\"!!vue-loader/node_modules/vue-style-loader!css-loader?minimize!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-578e9b7a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=styles&index=0!./tree.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./tree.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=script&index=0!./tree.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-578e9b7a\\\",\\\"hasScoped\\\":false,\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector?type=template&index=0!./tree.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/tree.vue\n// module id = 352\n// module chunks = 0 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/_css-loader@0.28.11@css-loader/index.js?minimize!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-578e9b7a\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./tree.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/_vue-style-loader@3.1.2@vue-style-loader/lib/addStylesClient.js\")(\"33d3be6e\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-style-loader@3.1.2@vue-style-loader!./node_modules/_css-loader@0.28.11@css-loader?minimize!./node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-578e9b7a\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./src/lib/tree.vue\n// module id = 353\n// module chunks = 0 1","exports = module.exports = require(\"../../node_modules/_css-loader@0.28.11@css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"a,a:hover{color:#000;text-decoration:none}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_css-loader@0.28.11@css-loader?minimize!./node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-578e9b7a\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./src/lib/tree.vue\n// module id = 354\n// module chunks = 0 1","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/_css-loader@0.28.11@css-loader/index.js?minimize!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-491d7a19\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./branch.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/_vue-style-loader@3.1.2@vue-style-loader/lib/addStylesClient.js\")(\"0dc019be\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-style-loader@3.1.2@vue-style-loader!./node_modules/_css-loader@0.28.11@css-loader?minimize!./node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-491d7a19\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./src/lib/branch.vue\n// module id = 355\n// module chunks = 0 1","exports = module.exports = require(\"../../node_modules/_css-loader@0.28.11@css-loader/lib/css-base.js\")(false);\n// imports\nexports.i(require(\"-!../../node_modules/_css-loader@0.28.11@css-loader/index.js?minimize!./icon/iconfont.css\"), \"\");\n\n// module\nexports.push([module.id, \".iconfont{font-family:iconfont!important;font-style:normal;font-weight:400;-webkit-font-smoothing:antialiased;-webkit-text-stroke-width:.2px;-moz-osx-font-smoothing:grayscale}.lt-branch-icon-Bg{width:20px;height:20px;position:absolute;transform:translateY(-50%);top:50%;left:0}.enter-start{transform:translateX(-25px);opacity:0;transition:all .3s}.enter-end,.leave-start{transform:translateX(0);opacity:1}.leave-start{transition:all .3s}.leave-end{transform:translateX(-25px);opacity:0}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_css-loader@0.28.11@css-loader?minimize!./node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-491d7a19\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./src/lib/branch.vue\n// module id = 356\n// module chunks = 0 1","var escape = require(\"../../../node_modules/_css-loader@0.28.11@css-loader/lib/url/escape.js\");\nexports = module.exports = require(\"../../../node_modules/_css-loader@0.28.11@css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"@font-face{font-family:iconfont;src:url(\" + escape(require(\"./iconfont.eot?t=1530402100306\")) + \");src:url(\" + escape(require(\"./iconfont.eot?t=1530402100306\")) + \"#iefix) format(\\\"embedded-opentype\\\"),url(\\\"data:application/x-font-woff;charset=utf-8;base64,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\\\") format(\\\"woff\\\"),url(\" + escape(require(\"./iconfont.ttf?t=1530402100306\")) + \") format(\\\"truetype\\\"),url(\" + escape(require(\"./iconfont.svg?t=1530402100306\")) + \"#iconfont) format(\\\"svg\\\")}.iconfont{font-family:iconfont!important;font-size:16px;font-style:normal;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-sanjiao3:before{content:\\\"\\\\E600\\\"}.icon-shousuojiahao:before{content:\\\"\\\\E627\\\"}.icon-shousuojianhao:before{content:\\\"\\\\E628\\\"}.icon-wenjianjia:before{content:\\\"\\\\E663\\\"}.icon-tongxunguanlizhankai:before{content:\\\"\\\\E655\\\"}.icon-tongxunguanli:before{content:\\\"\\\\E656\\\"}.icon-wenjianjia1:before{content:\\\"\\\\E67F\\\"}.icon-wenjianjiafolder80:before{content:\\\"\\\\E743\\\"}.icon-wenjianjiashouqi:before{content:\\\"\\\\E653\\\"}.icon-wenjianjiazhankai:before{content:\\\"\\\\E654\\\"}.icon-jiantou12:before{content:\\\"\\\\E603\\\"}.icon-jianhao:before{content:\\\"\\\\E606\\\"}.icon-jiahao2:before{content:\\\"\\\\E648\\\"}.icon-yousanjiao:before{content:\\\"\\\\E629\\\"}.icon-jiajianchengchu-:before{content:\\\"\\\\E61C\\\"}.icon-jiajianchengchu-1:before{content:\\\"\\\\E61D\\\"}.icon-jiahao:before{content:\\\"\\\\E616\\\"}.icon-jianhao1:before{content:\\\"\\\\E617\\\"}.icon-sanjiao3-copy:before{content:\\\"\\\\E7E1\\\"}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_css-loader@0.28.11@css-loader?minimize!./src/lib/icon/iconfont.css\n// module id = 357\n// module chunks = 0 1","module.exports = function escape(url) {\n    if (typeof url !== 'string') {\n        return url\n    }\n    // If url is already wrapped in quotes, remove them\n    if (/^['\"].*['\"]$/.test(url)) {\n        url = url.slice(1, -1);\n    }\n    // Should url be wrapped?\n    // See https://drafts.csswg.org/css-values-3/#urls\n    if (/[\"'() \\t\\n]/.test(url)) {\n        return '\"' + url.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n') + '\"'\n    }\n\n    return url\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_css-loader@0.28.11@css-loader/lib/url/escape.js\n// module id = 358\n// module chunks = 0 1","module.exports = __webpack_public_path__ + \"iconfont.ttf?3fd9bbb39ea5fcd2e6e03f30a745e88e\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/icon/iconfont.ttf?t=1530402100306\n// module id = 359\n// module chunks = 0 1","module.exports = __webpack_public_path__ + \"iconfont.svg?5acc98856fb3b59d18bdd51df00c3819\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/icon/iconfont.svg?t=1530402100306\n// module id = 360\n// module chunks = 0 1","module.exports = {\"icon1\":[\"iconfont icon-jiantou12\",45],\"icon2\":[\"iconfont icon-sanjiao3-copy\",90],\"icon3\":[\"iconfont icon-yousanjiao\",90],\"icon4\":[\"iconfont icon-yousanjiao\",\"iconfont icon-sanjiao3\"],\"icon5\":[\"iconfont icon-wenjianjia\",\"iconfont icon-wenjianjiafolder80\"],\"icon6\":[\"iconfont icon-wenjianjiashouqi\",\"iconfont icon-wenjianjiazhankai\"],\"icon7\":[\"iconfont icon-tongxunguanli\",\"iconfont icon-tongxunguanlizhankai\"],\"icon8\":[\"iconfont icon-jiahao\",\"iconfont icon-jianhao1\"],\"icon9\":[\"iconfont icon-shousuojiahao\",\"iconfont icon-shousuojianhao\"],\"icon10\":[\"iconfont icon-jiajianchengchu-1\",\"iconfont icon-jiajianchengchu-\"]}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/icon.json\n// module id = 361\n// module chunks = 0 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',_vm._l((_vm.listData),function(item,index){return _c('div',{key:index},[_c('div',{class:_vm.branchClassName(_vm.branchLevel+(index+1)),style:(_vm.branchStyle(_vm.branchLevel+(index+1))),attrs:{\"id\":'lt-branch_'+(_vm.branchLevel+(index+1)),\"data-index\":_vm.branchLevel+(index+1)},on:{\"click\":function($event){$event.preventDefault();_vm.clickBranch(_vm.branchLevel+(index+1), item.parameter)}}},[((_vm.getIcon(_vm.branchLevel+(index+1))&&item.children&&item.children.length>0)||(item.icon!==undefined&&item.icon.length===2))?_c('div',{staticClass:\"lt-branch-icon-Bg\",style:(_vm.branchIconBgStyle),attrs:{\"id\":'lt-branch-icon-bg_'+(_vm.branchLevel+(index+1))}},[((_vm.control['lt-branch-icon_'+(_vm.branchLevel+(index+1))]==='show')||(item.icon!==undefined&&item.icon.length===2))?_c('span',{class:_vm.branchIconClassName(_vm.branchLevel+(index+1)),style:(_vm.branchIconStyle(_vm.branchLevel+(index+1))),attrs:{\"id\":'lt-branch-icon_'+(_vm.branchLevel+(index+1))}}):_vm._e()]):_vm._e(),_c('span',[_vm._v(_vm._s(item.name))])]),_vm._v(\" \"),(item.children&&item.children.length>0)?_c('div',{style:(_vm.branchAnimationStyle(_vm.branchLevel+(index+1))),attrs:{\"id\":'lt-branch-animation_'+(_vm.branchLevel+(index+1))}},[_c('div',{style:(_vm.branchBoxStyle(_vm.branchLevel+(index+1), item.children)),attrs:{\"id\":'lt-branch-box_'+(_vm.branchLevel+(index+1))}},[(item.children&&item.children.length>0)?_c('branch',{attrs:{\"listData\":item.children,\"open\":_vm.open,\"openOnly\":_vm.openOnly,\"indent\":_vm.indent,\"spacing\":_vm.spacing,\"icon\":_vm.icon,\"iconSize\":_vm.iconSize,\"animation\":_vm.animation,\"clickBranchIndex\":_vm.clickBranchIndex,\"branchLevel\":_vm.branchLevel+(index+1)+'-',\"depth\":_vm.depth+1},on:{\"sendClickBranchIndex\":_vm.getClickBranchIndex}}):_vm._e()],1)]):_vm._e()])}))}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler?{\"id\":\"data-v-491d7a19\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=template&index=0!./src/lib/branch.vue\n// module id = 362\n// module chunks = 0 1","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('branch',{attrs:{\"listData\":_vm.listData,\"open\":_vm.open,\"openOnly\":_vm.openOnly,\"indent\":_vm.indent,\"spacing\":_vm.spacing,\"icon\":_vm.icon,\"iconSize\":_vm.iconSize,\"animation\":_vm.animation,\"clickBranchIndex\":_vm.clickBranchIndex},on:{\"sendClickBranchIndex\":_vm.getClickBranchIndex}})],1)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler?{\"id\":\"data-v-578e9b7a\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=template&index=0!./src/lib/tree.vue\n// module id = 363\n// module chunks = 0 1","<template>\r\n<div>\r\n  <div class=\"listtree\"></div>\r\n</div>\r\n</template>\r\n<script>\r\nimport Vue from 'vue'\r\nimport Listtree from '../../lib'\r\nimport listData from './listdata.json'\r\n\r\nVue.use(Listtree, {\r\n  listData,\r\n  icon: 0,\r\n  indent: 18,\r\n  open:['always', 0, 1]\r\n})\r\n\r\nVue.prototype.$listClick = (r) => {\r\n  if (typeof r !== 'undefined') {\r\n    console.log(r)\r\n  }\r\n}\r\n(function () {\r\n  /* 当多次使用Vue.use调用同一个插件时，后面的调用不起作用，这里为了调用不同的示例所以通过强制刷新页面来达到调用的目的，实际项目中一般不会重复调用同一个插件 */\r\n  if(sessionStorage.demo !== 'demo1'){\r\n    sessionStorage.demo = 'demo1'\r\n    location.reload()\r\n    return\r\n  }\r\n  sessionStorage.demo = ''\r\n})()\r\n\r\nexport default {\r\n}\r\n</script>\r\n<style>\r\n.lt-branch{\r\n  margin: 14px 0px;\r\n  background: #fff;\r\n}\r\n.lt-branch span{\r\n  color: #7f8c8d;\r\n  cursor: pointer;\r\n  font-size: 15px;\r\n}\r\n.lt-branch_level_1 span{\r\n  margin-left:18px;\r\n  color: #2c3e50;\r\n  font-weight: 600;\r\n  font-size: 20px;\r\n  cursor: auto;\r\n}\r\n.lt-branch_level_0 span{\r\n  color:#34495e;\r\n}\r\n.lt-branch_level_2 span:hover{\r\n  border-bottom:2px solid #42b983; \r\n}\r\n.lt-branch_level_2 span{\r\n  color: #7f8c8d;\r\n}\r\n.lt-branch_active span{\r\n  color:#42b983;\r\n  font-weight: bold;\r\n}\r\n.lt-branch_level_2_active span{\r\n  color:#42b983;\r\n  font-weight: 600;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// src/demo/demo1/index.vue","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../node_modules/_css-loader@0.28.11@css-loader/index.js?minimize!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler/index.js?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-c3107bf0\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../../node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./index.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../../node_modules/_vue-style-loader@3.1.2@vue-style-loader/lib/addStylesClient.js\")(\"6f199cc0\", content, true, {});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-style-loader@3.1.2@vue-style-loader!./node_modules/_css-loader@0.28.11@css-loader?minimize!./node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-c3107bf0\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./src/demo/demo1/index.vue\n// module id = 370\n// module chunks = 0","exports = module.exports = require(\"../../../node_modules/_css-loader@0.28.11@css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".lt-branch{margin:14px 0;background:#fff}.lt-branch span{color:#7f8c8d;cursor:pointer;font-size:15px}.lt-branch_level_1 span{margin-left:18px;color:#2c3e50;font-weight:600;font-size:20px;cursor:auto}.lt-branch_level_0 span{color:#34495e}.lt-branch_level_2 span:hover{border-bottom:2px solid #42b983}.lt-branch_level_2 span{color:#7f8c8d}.lt-branch_active span{color:#42b983;font-weight:700}.lt-branch_level_2_active span{color:#42b983;font-weight:600}\", \"\"]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_css-loader@0.28.11@css-loader?minimize!./node_modules/_vue-loader@13.7.2@vue-loader/lib/style-compiler?{\"vue\":true,\"id\":\"data-v-c3107bf0\",\"scoped\":false,\"hasInlineConfig\":false}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=styles&index=0!./src/demo/demo1/index.vue\n// module id = 371\n// module chunks = 0","module.exports = [{\"name\":\"基础\",\"children\":[{\"name\":\"介绍\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"Vue.js是什么\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"起步\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"声明式渲染\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"条件与循环\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"处理用户输入\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"组件化应用构建\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"与自定义元素的关系\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"准备好了吗\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"Vue实例\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"创建一个Vue实例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数据与方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"实例生命周期钩子\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"生命周期图示\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"模板语法\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"插槽\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"文本\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"原始HTML\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"特性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"使用JavaScript表达式\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"指令\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"参数\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"缩写\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"v-bind缩写\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-on缩写\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"计算属性和侦听器\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"计算属性\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础例子\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"计算属性缓存vs方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"计算属性vs侦听属性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"计算属性的setter\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"侦听器\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"Class与Style绑定\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"绑定HTML Class\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"对象语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数组语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"用在组件上\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"绑定内联样式\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"对象语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数组语法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自动添加前缀\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"多重值\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"条件渲染\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"v-if\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"在<template>元素上使用v-if条件渲染分组\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-else\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-else-if\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"用key管理可复用的元素\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"v-show\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-if vs v-show\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-if与v-for一起使用\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"列表渲染\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"用v-for把一个数组对应为一组元素\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"一个对象的v-for\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"key\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"数组更新检测\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"变异方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"替换数组\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"注意事项\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"对象更改检测注意事项\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"显示过滤/排序结果\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"一段取值范围的v-for\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-for on a <template>\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-for with v-if\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"一个数组的v-for\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"事件处理\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"监听事件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"事件处理方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"内联处理器中的方法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"事件修饰符\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"按键修饰符\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"自动匹配按键修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"系统修饰符\",\"parameter\":\"/abc\",\"children\":[{\"name\":\".exact修饰符\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"鼠标按钮修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"为什么在HTML中监听事件\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"表单输入绑定\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础用法\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"文本\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"多行文本\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"复选框\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单选按钮\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"选择框\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"值绑定\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"复选框\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单选按钮\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"选择框的选项\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"修饰符\",\"parameter\":\"/abc\",\"children\":[{\"name\":\".lazy\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\".number\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\".trim\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"在组件上使用v-model\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"组件基础\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基本示例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"组件的复用\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"data必须是一个函数\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"组件的组织\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"通过Prop向子组件传递数据\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单个根元素\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"通过事件向父级组件发送信息\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"使用事件抛出一个值\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"在组件上使用v-model\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"通过插槽分发内容\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"动态组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"解析DOM模板时的注意事项\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"深入了解组件\",\"children\":[{\"name\":\"组件注册\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"组件名\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"组件名大小写\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"全局组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"局部组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"模块系统\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"在模块系统中局部注册\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"基础组件的自动化全局注册\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"Prop\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"Prop的大小写\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"Prop类型\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传递静态或动态Prop\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"传入一个数字\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个布尔值\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个数组\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个对象\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"传入一个对象的所有属性\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"单项数据流\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"Prop验证\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"类型检查\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"非Prop的特性\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"替换/合并已有的特性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"禁用特性继承\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"自定义事件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"事件名\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自定义组件的v-model\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"将原生事件绑定到组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\".sync修饰符\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"插槽\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"插槽内容\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"具名插槽\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"插槽的默认内容\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"编译作用域\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"作用域插槽\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"结构slot-scope\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"动态组件&异步组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"在动态组件上使用keep-alive\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"处理加载状态\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"异步组件\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"处理边界情况\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"访问元素&组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"访问根实例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"访问父级组件实例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"访问子组件实例或子元素\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"依赖注入\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"程序化的事件侦听器\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"循环引用\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"递归组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"组件之间的循环引用\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"模板定义的替代品\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"内联模板\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"X-Templates\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"控制更新\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"强制更新\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"通过v-once创建低开销的静态组件\",\"parameter\":\"/abc\",\"children\":[]}]}]}]},{\"name\":\"过渡&动画\",\"children\":[{\"name\":\"进入/离开&列表过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"概述\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"单元素/组件的过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"过渡的类名\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"CSS过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"CSS动画\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自定义过渡的类名\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"同时使用过渡和动画\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"显性的过渡持续时间\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"JavaScript钩子\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"初始渲染的过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"多个元素的过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"过渡模式\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"多个组件的过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"列表过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"列表的进入/离开过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"列表的排序过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"列表的交错过渡\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"可复用的过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"动态过渡\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"状态过渡\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"状态动画与侦听器\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"动态状态过渡\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"把过渡放的组件里\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"赋予设计以生命\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"可复用性&组合\",\"children\":[{\"name\":\"混入\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"选项合并\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"全局混入\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"自定义选项合并策略\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"自定义指令\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"简介\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"钩子函数\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"钩子函数参数\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"函数简写\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"对象字面量\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"渲染函数&JSX\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"基础\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"节点、树以及虚拟DOM\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"虚拟DOM\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"createElement参数\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"深入data对象\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"完整示例\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"约束\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"使用JavaScript代替模板功能\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"v-if和v-for\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"v-model\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"事件&按键修饰符\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"插槽\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"JSX\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"函数式组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"向子元素或子组件传递特性和事件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"slots()和children对比\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"模板编译\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"插件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"开发插件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"使用插件\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"过滤器\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"工具\",\"children\":[{\"name\":\"生产环境部署\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"开启生产环境模式\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"模板预编译\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"提取组件的CSS\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"跟踪运行时错误\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"单文件组件\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"介绍\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"怎么看待关注点分离\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"起步\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"例子沙箱\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"针对刚接触JavaScript模块开发系统的用户\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"针对高级用户\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"单元测试\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"配置和工具\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"简单的断言\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"编写可被测试的组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"断言异步更新\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"TypeScript支持\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"发布为NPM包的官方声明文件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"推荐配置\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"开发工具链\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"工程创建\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"编辑器支持\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"基本用法\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"基于类的Vue组件\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"增强类型以配合插件使用\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"标注返回值\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"模块化\",\"children\":[{\"name\":\"路由\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"官方路由\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"从零开始简单的路由\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"整合第三方路由\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"状态管理\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"类Flux状态管理的官方实现\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"React的开发者请参考以下信息\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"简单状态管理起步使用\",\"parameter\":\"/abc\",\"children\":[]}]},{\"name\":\"服务端渲染\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"SSR完全指南\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"Nuxt.js\",\"parameter\":\"/abc\",\"children\":[]}]}]},{\"name\":\"内在\",\"children\":[{\"name\":\"深入响应式原理\",\"parameter\":\"/abc\",\"children\":[{\"name\":\"如何追踪变化\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"监测变化的注意事项\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"声明响应式属性\",\"parameter\":\"/abc\",\"children\":[]},{\"name\":\"异步更新队列\",\"parameter\":\"/abc\",\"children\":[]}]}]}]\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/demo/demo1/listdata.json\n// module id = 372\n// module chunks = 0","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"listtree\"})])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_vue-loader@13.7.2@vue-loader/lib/template-compiler?{\"id\":\"data-v-c3107bf0\",\"hasScoped\":false,\"buble\":{\"transforms\":{}}}!./node_modules/_vue-loader@13.7.2@vue-loader/lib/selector.js?type=template&index=0!./src/demo/demo1/index.vue\n// module id = 373\n// module chunks = 0"],"sourceRoot":""}